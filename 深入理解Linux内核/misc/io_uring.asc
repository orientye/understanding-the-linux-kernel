:toc:
:toclevels: 5
:hardbreaks-option:

== io_uring

=== 简介
- 历史

    kernel version >= 5.1, 2019年

- io_uring名称的含义

    io既包含文件IO, 也包括网络IO
    uring表示use ring buffer实现内核与应用层的通信

- 使用情况

    rocksdb: http://openinx.github.io/ppt/io-uring.pdf
    https://wiki.qemu.org/ChangeLog/5.0
    https://github.com/ceph/ceph/blob/main/src/blk/kernel/io_uring.cc

=== 设计背景
read(2), write(2): 最古老, 最基本
pread(2), pwrite(2): 支持offset
readv(2), writev(2): 支持vector, 即分散输入和集中输出(Scatter-Gather I/O)
preadv(2), pwritev(2): offset + vector

aio_read(2), aio_write(2): 支持异步, POSIX, 但乏善可陈, 性能不佳
https://man7.org/linux/man-pages/man7/aio.7.html

io_setup(2), io_submit(2), io_getevents(2): linux native aio
https://man7.org/linux/man-pages/man2/io_submit.2.html
不足:

- 仅支持direct IO

    在采用AIO的时候，只能使用O_DIRECT，不能借助文件系统缓存来缓存当前的IO请求
    还存在size对齐(直接操作磁盘，所有写入内存块数量必须是文件系统块大小的倍数，而且要与内存页大小对齐)等限制。

- 仍然可能被阻塞

    语义不完备。即使应用层主观上，希望系统层采用异步IO，但是客观上，有时候还是可能会被阻塞。
    io_getevents(2)调用read_events读取AIO的完成events，read_events中的wait_event_interruptible_hrtimeout等待aio_read_events，
    如果条件不成立(events未完成)则调用__wait_event_hrtimeout进入睡眠(当然，支持用户态设置最大等待时间)。

- 拷贝开销大

    每个IO提交需要拷贝64+8字节，每个IO完成需要拷贝32字节，总共104字节的拷贝。
    这个拷贝开销是否可以承受，和单次IO大小有关:
        如果需要发送的IO本身就很大，相较之下，这点消耗可以忽略，
        如果大量小IO的场景下，这样的拷贝影响比较大。

- API不友好

    每一个IO至少需要两次系统调用才能完成(submit和wait-for-completion)，需要非常小心地使用完成事件以避免丢事件。
    系统调用开销大。
    也正是因为上一条，io_submit/io_getevents造成了较大的系统调用开销
    在存在spectre/meltdown(CPU熔断幽灵漏洞，CVE-2017-5754)的机器上，若如果要避免漏洞问题，系统调用性能则会大幅下降。
    在存储场景下，高频系统调用的性能影响较大。

=== 思想
异步操作可以分为两步: 1.提交请求 2.请求完成
对于提交请求, 应用层是生产者, 内核是消费者。
对于请求完成, 内核是生产者, 应用层是消费者。
分别对应两个环形缓冲区: SQ(Submission Queue, 即提交队列), CQ(Completion Queue, 即完成队列)

▪ 降低了系统调用次数
▪ 使用共享内存(共享两个ring queue) + SPSC(单生产者单消费者, 无锁)
▪ 统一了API

=== 系统调用
SYSCALL_DEFINE:
https://elixir.bootlin.com/linux/latest/source/tools/io_uring/liburing.h

https://elixir.bootlin.com/linux/latest/source/tools/io_uring/syscall.c

==== io_uring_setup
- int io_uring_setup(unsigned entries, struct io_uring_params *p);
    io_uring_setup的作用是建立context, 返回一个新的io_uring fd给后续函数(mmap/io_uring_register/io_uring_enter)调用。
    核心函数: io_uring_create
    代码: https://elixir.bootlin.com/linux/latest/C/ident/io_uring_create

- 参数unsigned entries
    可以近似认为是SQ的长度或CQ长度的一半, 参数内核首先会对这个参数进行2的幂次方取证, 之后SQ和CQ的长度的计算与此值相关。

- 参数struct io_uring_params *p
    作为输入参数，同时也是输出参数
    
    struct io_uring_params {
        __u32 sq_entries;
        __u32 cq_entries;
        __u32 flags;
        __u32 sq_thread_cpu;
        __u32 sq_thread_idle;
        __u32 features;
        __u32 wq_fd;
        __u32 resv[3];
        struct io_sqring_offsets sq_off;
        struct io_cqring_offsets cq_off;
    };

- 返回值
    成功返回一个fd, 用于后续的mmap调用或者io_uring_register和io_uring_enter调用, 否则返回-1

==== io_uring_enter
- int io_uring_enter(unsigned int fd, unsigned int to_submit, unsigned int min_complete, unsigned int flags, sigset_t *sig);
    io_uring_setup的作用是初始化和/或完成异步I/O, 是io_uring最核心的接口
    代码: https://elixir.bootlin.com/linux/latest/source/io_uring/io_uring.c

- 参数fd
    io_uring_setup返回的fd

- 参数to_submit
    todo

- 参数min_complete
    todo

- 参数flags
    todo

- 参数sig
    todo

- 返回值
    返回成功消费的IO数量。This can be zero if to_submit was zero or if the submission queue was empty. Note that if the ring was created with IORING_SETUP_SQPOLL specified, then the return value will generally be the same as to_submit as submission happens outside the context of the system call.
    The errors related to a submission queue entry will be returned through a completion queue entry (see section CQE ERRORS), rather than through the system call itself.
    Errors that occur not on behalf of a submission queue entry are returned via the system call directly. On such an error, -1 is returned and errno is set appropriately.

==== io_uring_register
- int io_uring_register(unsigned int fd, unsigned int opcode, void *arg, unsigned int nr_args);

=== 应用层
==== liburing
liburing简化了io_uring的使用:
https://github.com/axboe/liburing

===== 编译与安装

    git clone https://github.com/axboe/liburing.git
    cd liburing
    ./configure
    make -j 8
    sudo make install

===== 核心结构
[source, c]
.https://elixir.bootlin.com/linux/latest/source/tools/io_uring/liburing.h
----
/*
 * Library interface to io_uring
 */
struct io_uring_sq {
	unsigned *khead;
	unsigned *ktail;
	unsigned *kring_mask;
	unsigned *kring_entries;
	unsigned *kflags;
	unsigned *kdropped;
	unsigned *array;
	struct io_uring_sqe *sqes;

	unsigned sqe_head;
	unsigned sqe_tail;

	size_t ring_sz;
};

struct io_uring_cq {
	unsigned *khead;
	unsigned *ktail;
	unsigned *kring_mask;
	unsigned *kring_entries;
	unsigned *koverflow;
	struct io_uring_cqe *cqes;

	size_t ring_sz;
};

struct io_uring {
	struct io_uring_sq sq;
	struct io_uring_cq cq;
	int ring_fd;
};
----

===== 使用
1 使用io_uring_queue_init，完成io_uring相关结构的初始化，它会调用多个mmap来初始化一些内存。
2 初始化完成之后，为了提交IO请求，需要获取里面queue的一个项，使用io_uring_get_sqe。
3 获取到了空闲项之后，使用io_uring_prep_readv、io_uring_prep_writev初始化读、写请求。
4 准备完成之后，使用io_uring_submit提交请求。
5 提交了IO请求时，可以通过非阻塞式函数io_uring_peek_cqe、阻塞式函数io_uring_wait_cqe获取请求完成的情况。
6 默认情况下，完成的IO请求还会存在内部的队列中，需要通过io_uring_cqe_seen表标记完成操作。
7 使用完成之后需要通过io_uring_queue_exit来完成资源清理。

===== 示例
https://github.com/axboe/liburing/tree/master/examples
https://github.com/axboe/liburing/tree/master/test
https://unixism.net/loti/tutorial/index.html

===== 实现
https://elixir.bootlin.com/linux/latest/source/tools/io_uring/liburing.h

==== 特性
- Fixed Files And Buffers
- Polled IO
- Kernel Side Polling

==== benchmark
https://github.com/frevib/io_uring-echo-server

=== 主要实现
https://elixir.bootlin.com/linux/latest/source/io_uring

==== 数据结构
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/io_uring.h
----
/*
 * IO submission data structure (Submission Queue Entry)
 */
struct io_uring_sqe {
	__u8	opcode;		/* type of operation for this sqe */
	__u8	flags;		/* IOSQE_ flags */
	__u16	ioprio;		/* ioprio for the request */
	__s32	fd;		/* file descriptor to do IO on */
	union {
		__u64	off;	/* offset into file */
		__u64	addr2;
		struct {
			__u32	cmd_op;
			__u32	__pad1;
		};
	};
	union {
		__u64	addr;	/* pointer to buffer or iovecs */
		__u64	splice_off_in;
	};
	__u32	len;		/* buffer size or number of iovecs */
	union {
		__kernel_rwf_t	rw_flags;
		__u32		fsync_flags;
		__u16		poll_events;	/* compatibility */
		__u32		poll32_events;	/* word-reversed for BE */
		__u32		sync_range_flags;
		__u32		msg_flags;
		__u32		timeout_flags;
		__u32		accept_flags;
		__u32		cancel_flags;
		__u32		open_flags;
		__u32		statx_flags;
		__u32		fadvise_advice;
		__u32		splice_flags;
		__u32		rename_flags;
		__u32		unlink_flags;
		__u32		hardlink_flags;
		__u32		xattr_flags;
		__u32		msg_ring_flags;
		__u32		uring_cmd_flags;
	};
	__u64	user_data;	/* data to be passed back at completion time */
	/* pack this to avoid bogus arm OABI complaints */
	union {
		/* index into fixed buffers, if used */
		__u16	buf_index;
		/* for grouped buffer selection */
		__u16	buf_group;
	} __attribute__((packed));
	/* personality to use, if used */
	__u16	personality;
	union {
		__s32	splice_fd_in;
		__u32	file_index;
		struct {
			__u16	addr_len;
			__u16	__pad3[1];
		};
	};
	union {
		struct {
			__u64	addr3;
			__u64	__pad2[1];
		};
		/*
		 * If the ring is initialized with IORING_SETUP_SQE128, then
		 * this field is used for 80 bytes of arbitrary command data
		 */
		__u8	cmd[0];
	};
};

//....

/*
 * IO completion data structure (Completion Queue Entry)
 */
struct io_uring_cqe {
	__u64	user_data;	/* sqe->data submission passed back */
	__s32	res;		/* result code for this event */
	__u32	flags;

	/*
	 * If the ring is initialized with IORING_SETUP_CQE32, then this field
	 * contains 16-bytes of padding, doubling the size of the CQE.
	 */
	__u64 big_cqe[];
};
----

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/io_uring_types.h
----
struct io_uring {
	u32 head ____cacheline_aligned_in_smp;
	u32 tail ____cacheline_aligned_in_smp;
};

/*
 * This data is shared with the application through the mmap at offsets
 * IORING_OFF_SQ_RING and IORING_OFF_CQ_RING.
 *
 * The offsets to the member fields are published through struct
 * io_sqring_offsets when calling io_uring_setup.
 */
struct io_rings {
	/*
	 * Head and tail offsets into the ring; the offsets need to be
	 * masked to get valid indices.
	 *
	 * The kernel controls head of the sq ring and the tail of the cq ring,
	 * and the application controls tail of the sq ring and the head of the
	 * cq ring.
	 */
	struct io_uring		sq, cq;
	/*
	 * Bitmasks to apply to head and tail offsets (constant, equals
	 * ring_entries - 1)
	 */
	u32			sq_ring_mask, cq_ring_mask;
	/* Ring sizes (constant, power of 2) */
	u32			sq_ring_entries, cq_ring_entries;
	/*
	 * Number of invalid entries dropped by the kernel due to
	 * invalid index stored in array
	 *
	 * Written by the kernel, shouldn't be modified by the
	 * application (i.e. get number of "new events" by comparing to
	 * cached value).
	 *
	 * After a new SQ head value was read by the application this
	 * counter includes all submissions that were dropped reaching
	 * the new SQ head (and possibly more).
	 */
	u32			sq_dropped;
	/*
	 * Runtime SQ flags
	 *
	 * Written by the kernel, shouldn't be modified by the
	 * application.
	 *
	 * The application needs a full memory barrier before checking
	 * for IORING_SQ_NEED_WAKEUP after updating the sq tail.
	 */
	atomic_t		sq_flags;
	/*
	 * Runtime CQ flags
	 *
	 * Written by the application, shouldn't be modified by the
	 * kernel.
	 */
	u32			cq_flags;
	/*
	 * Number of completion events lost because the queue was full;
	 * this should be avoided by the application by making sure
	 * there are not more requests pending than there is space in
	 * the completion queue.
	 *
	 * Written by the kernel, shouldn't be modified by the
	 * application (i.e. get number of "new events" by comparing to
	 * cached value).
	 *
	 * As completion events come in out of order this counter is not
	 * ordered with any other data.
	 */
	u32			cq_overflow;
	/*
	 * Ring buffer of completion events.
	 *
	 * The kernel writes completion events fresh every time they are
	 * produced, so the application is allowed to modify pending
	 * entries.
	 */
	struct io_uring_cqe	cqes[] ____cacheline_aligned_in_smp;
};
----

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/io_uring.h
----
enum io_uring_op {
	IORING_OP_NOP,
	IORING_OP_READV,
	IORING_OP_WRITEV,
	IORING_OP_FSYNC,
	IORING_OP_READ_FIXED,
	IORING_OP_WRITE_FIXED,
	IORING_OP_POLL_ADD,
	IORING_OP_POLL_REMOVE,
	IORING_OP_SYNC_FILE_RANGE,
	IORING_OP_SENDMSG,
	IORING_OP_RECVMSG,
	IORING_OP_TIMEOUT,
	IORING_OP_TIMEOUT_REMOVE,
	IORING_OP_ACCEPT,
	IORING_OP_ASYNC_CANCEL,
	IORING_OP_LINK_TIMEOUT,
	IORING_OP_CONNECT,
	IORING_OP_FALLOCATE,
	IORING_OP_OPENAT,
	IORING_OP_CLOSE,
	IORING_OP_FILES_UPDATE,
	IORING_OP_STATX,
	IORING_OP_READ,
	IORING_OP_WRITE,
	IORING_OP_FADVISE,
	IORING_OP_MADVISE,
	IORING_OP_SEND,
	IORING_OP_RECV,
	IORING_OP_OPENAT2,
	IORING_OP_EPOLL_CTL,
	IORING_OP_SPLICE,
	IORING_OP_PROVIDE_BUFFERS,
	IORING_OP_REMOVE_BUFFERS,
	IORING_OP_TEE,
	IORING_OP_SHUTDOWN,
	IORING_OP_RENAMEAT,
	IORING_OP_UNLINKAT,
	IORING_OP_MKDIRAT,
	IORING_OP_SYMLINKAT,
	IORING_OP_LINKAT,
	IORING_OP_MSG_RING,
	IORING_OP_FSETXATTR,
	IORING_OP_SETXATTR,
	IORING_OP_FGETXATTR,
	IORING_OP_GETXATTR,
	IORING_OP_SOCKET,
	IORING_OP_URING_CMD,
	IORING_OP_SEND_ZC,
	IORING_OP_SENDMSG_ZC,

	/* this goes last, obviously */
	IORING_OP_LAST,
};
----

=== 参考
https://lwn.net/Kernel/Index/#io_uring
https://en.wikipedia.org/wiki/Io_uring
https://unixism.net/loti/index.html
https://kernel.dk/io_uring.pdf
https://zhuanlan.zhihu.com/p/380726590
https://zhuanlan.zhihu.com/p/413523052
https://zhuanlan.zhihu.com/p/334658432
https://zhuanlan.zhihu.com/p/334763504
https://zhuanlan.zhihu.com/p/361955546
https://lore.kernel.org/linux-block/20190116175003.17880-1-axboe@kernel.dk/
https://www.scylladb.com/2020/05/05/how-io_uring-and-ebpf-will-revolutionize-programming-in-linux/
https://lwn.net/Articles/810414/
https://arthurchiao.art/blog/intro-to-io-uring-zh/
https://kernel.taobao.org/2020/08/Introduction_to_IO_uring/
https://blog.csdn.net/csdnnews/article/details/108848646