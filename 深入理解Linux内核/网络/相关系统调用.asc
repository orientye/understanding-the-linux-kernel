:toc:
:toclevels: 5
:hardbreaks-option:

== 相关系统调用

=== socket
https://elixir.bootlin.com/linux/latest/source/net/socket.c

    SYSCALL_DEFINE3(socket, int, family, int, type, int, protocol)

最终实现函数: __sock_create()

=== bind
https://elixir.bootlin.com/linux/latest/source/net/socket.c

    SYSCALL_DEFINE3(bind, int, fd, struct sockaddr __user *, umyaddr, int, addrlen)

最终实现:

    int __sys_bind(int fd, struct sockaddr __user *umyaddr, int addrlen)
        sock->ops->bind(...)

=== connect
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/socket.c
----
int __sys_connect_file(struct file *file, struct sockaddr_storage *address,
		       int addrlen, int file_flags)
{
	struct socket *sock;
	int err;

	sock = sock_from_file(file);
	if (!sock) {
		err = -ENOTSOCK;
		goto out;
	}

	err =
	    security_socket_connect(sock, (struct sockaddr *)address, addrlen);
	if (err)
		goto out;

	err = sock->ops->connect(sock, (struct sockaddr *)address, addrlen,
				 sock->file->f_flags | file_flags);
out:
	return err;
}

int __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
{
	int ret = -EBADF;
	struct fd f;

	f = fdget(fd);
	if (f.file) {
		struct sockaddr_storage address;

		ret = move_addr_to_kernel(uservaddr, addrlen, &address);
		if (!ret)
			ret = __sys_connect_file(f.file, &address, addrlen, 0);
		fdput(f);
	}

	return ret;
}

SYSCALL_DEFINE3(connect, int, fd, struct sockaddr __user *, uservaddr,
		int, addrlen)
{
	return __sys_connect(fd, uservaddr, addrlen);
}
----

=== epoll
https://lwn.net/Kernel/Index/#Epoll
