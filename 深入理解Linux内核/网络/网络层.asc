:toc:
:toclevels: 5
:hardbreaks-option:

== 网络层

=== 结构
==== struct packet_type
网络层输入接口packet_type在链路层和网络层起到桥梁作用。
例如在以太网上，当以太网帧到达主机后，内核会根据协议族的报文类型调用相应的网络层接收处理函数。

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/netdevice.h
----
struct packet_type {
	__be16			type;	/* This is really htons(ether_type). */
	bool			ignore_outgoing;
	struct net_device	*dev;	/* NULL is wildcarded here	     */
	netdevice_tracker	dev_tracker;
	int			(*func) (struct sk_buff *,
					 struct net_device *,
					 struct packet_type *,
					 struct net_device *);
	void			(*list_func) (struct list_head *,
					      struct packet_type *,
					      struct net_device *);
	bool			(*id_match)(struct packet_type *ptype,
					    struct sock *sk);
	struct net		*af_packet_net;
	void			*af_packet_priv;
	struct list_head	list;
};
----

ipv4:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/af_inet.c
----
static struct packet_type ip_packet_type __read_mostly = {
	.type = cpu_to_be16(ETH_P_IP),
	.func = ip_rcv,
	.list_func = ip_list_rcv,
};
----

ipv6:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv6/af_inet6.c
----
static struct packet_type ipv6_packet_type __read_mostly = {
	.type = cpu_to_be16(ETH_P_IPV6),
	.func = ipv6_rcv,
	.list_func = ipv6_list_rcv,
};
----

=== 流量控制

==== 历史
2.2版本之前，不支持服务质量: 所有IP数据报采用FIFO，并尽最大努力传输，如果发生拥塞，路由器便会直接丢弃数据包。
随着网络的发展和数据量的增长，简单丢弃数据包的方式已经不再适用了，新的版本增加了QoS功能，目的是针对不同的需求，提供不同服务质量的网络服务功能。

==== 命令
tc - show / manipulate traffic control settings

==== 输出的流量控制
int __dev_queue_xmit(struct sk_buff *skb, struct net_device *sb_dev):
https://elixir.bootlin.com/linux/latest/source/net/core/dev.c

static inline bool qdisc_restart(struct Qdisc *q, int *packets):
https://elixir.bootlin.com/linux/latest/source/net/sched/sch_generic.c

==== 实现
- struct Qdisc
qdisc(queue discipline，排队规则)
Queuing disciplines (qdiscs) help with queuing up and, later, scheduling of traffic transmission by a network interface.
命令: tc -s qdisc show dev ens33 查看qdisc信息

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/sch_generic.h
----
struct Qdisc {
	int 			(*enqueue)(struct sk_buff *skb,
					   struct Qdisc *sch,
					   struct sk_buff **to_free);
	struct sk_buff *	(*dequeue)(struct Qdisc *sch);
	unsigned int		flags;
#define TCQ_F_BUILTIN		1
#define TCQ_F_INGRESS		2
#define TCQ_F_CAN_BYPASS	4
#define TCQ_F_MQROOT		8
#define TCQ_F_ONETXQUEUE	0x10 /* dequeue_skb() can assume all skbs are for
				      * q->dev_queue : It can test
				      * netif_xmit_frozen_or_stopped() before
				      * dequeueing next packet.
				      * Its true for MQ/MQPRIO slaves, or non
				      * multiqueue device.
				      */
#define TCQ_F_WARN_NONWC	(1 << 16)
#define TCQ_F_CPUSTATS		0x20 /* run using percpu statistics */
#define TCQ_F_NOPARENT		0x40 /* root of its hierarchy :
				      * qdisc_tree_decrease_qlen() should stop.
				      */
#define TCQ_F_INVISIBLE		0x80 /* invisible by default in dump */
#define TCQ_F_NOLOCK		0x100 /* qdisc does not require locking */
#define TCQ_F_OFFLOADED		0x200 /* qdisc is offloaded to HW */
	u32			limit;
	const struct Qdisc_ops	*ops;
	struct qdisc_size_table	__rcu *stab;
	struct hlist_node       hash;
	u32			handle;
	u32			parent;

	struct netdev_queue	*dev_queue;

	struct net_rate_estimator __rcu *rate_est;
	struct gnet_stats_basic_sync __percpu *cpu_bstats;
	struct gnet_stats_queue	__percpu *cpu_qstats;
	int			pad;
	refcount_t		refcnt;

	/*
	 * For performance sake on SMP, we put highly modified fields at the end
	 */
	struct sk_buff_head	gso_skb ____cacheline_aligned_in_smp;
	struct qdisc_skb_head	q;
	struct gnet_stats_basic_sync bstats;
	struct gnet_stats_queue	qstats;
	unsigned long		state;
	unsigned long		state2; /* must be written under qdisc spinlock */
	struct Qdisc            *next_sched;
	struct sk_buff_head	skb_bad_txq;

	spinlock_t		busylock ____cacheline_aligned_in_smp;
	spinlock_t		seqlock;

	struct rcu_head		rcu;
	netdevice_tracker	dev_tracker;
	/* private data */
	long privdata[] ____cacheline_aligned;
};
----

- struct Qdisc_ops
https://elixir.bootlin.com/linux/latest/source/include/net/sch_generic.h

- struct tcf_proto
tcf: traffic control filter?
https://elixir.bootlin.com/linux/latest/source/include/net/sch_generic.h

==== FIFO
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/sched/sch_generic.c
----
struct Qdisc_ops pfifo_fast_ops __read_mostly = {
	.id		=	"pfifo_fast",
	.priv_size	=	sizeof(struct pfifo_fast_priv),
	.enqueue	=	pfifo_fast_enqueue,
	.dequeue	=	pfifo_fast_dequeue,
	.peek		=	pfifo_fast_peek,
	.init		=	pfifo_fast_init,
	.destroy	=	pfifo_fast_destroy,
	.reset		=	pfifo_fast_reset,
	.dump		=	pfifo_fast_dump,
	.change_tx_queue_len =  pfifo_fast_change_tx_queue_len,
	.owner		=	THIS_MODULE,
	.static_flags	=	TCQ_F_NOLOCK | TCQ_F_CPUSTATS,
};
----

==== 基于netlink的tc命令

=== 地址
struct in_device: https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h
struct in_ifaddr: https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h

static struct in_device *inetdev_init(struct net_device *dev):
static void inetdev_destroy(struct in_device *in_dev):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/devinet.c

int inet_addr_onlink(struct in_device *in_dev, __be32 a, __be32 b):
__be32 inet_select_addr(const struct net_device *dev, __be32 dst, int scope):
__be32 inet_confirm_addr(struct net *net, struct in_device *in_dev, __be32 dst, __be32 local, int scope)等:
https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h

=== 输入
int ip_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_input.c

int ipv6_rcv(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev):
https://elixir.bootlin.com/linux/latest/source/net/ipv6/ip6_input.c

=== 输出
==== IP数据报输出到设备
int ip_output(struct net *net, struct sock *sk, struct sk_buff *skb):
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c
----
int ip_output(struct net *net, struct sock *sk, struct sk_buff *skb)
{
	struct net_device *dev = skb_dst(skb)->dev, *indev = skb->dev;

	IP_UPD_PO_STATS(net, IPSTATS_MIB_OUT, skb->len);

	skb->dev = dev;
	skb->protocol = htons(ETH_P_IP);

	return NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING,
			    net, sk, skb, indev, dev,
			    ip_finish_output,
			    !(IPCB(skb)->flags & IPSKB_REROUTED));
}
----
首先，更新IPSTATS_MIB_OUT统计计数：IP_UPD_PO_STATS宏将更新字节数和包数统计。
之后，设置要发送此skb的设备以及协议。
最后，通过调用NF_HOOK_COND将控制权交给netfilter。NF_HOOK_COND通过检查传入的条件来工作：如果此条件为真，则skb将发送给netfilter。如果netfilter允许包通过，okfn回调函数将被调用，此处okfn是ip_finish_output。

int ip6_output(struct net *net, struct sock *sk, struct sk_buff *skb):
https://elixir.bootlin.com/linux/latest/source/net/ipv6/ip6_output.c

==== TCP输出
int ip_queue_xmit(struct sock *sk, struct sk_buff *skb, struct flowi *fl):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c

int ip6_xmit(const struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6, __u32 mark, struct ipv6_txoptions *opt, int tclass, u32 priority):
https://elixir.bootlin.com/linux/latest/source/net/ipv6/ip6_output.c

==== UDP输出
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c
----
/*
 *	ip_append_data() and ip_append_page() can make one large IP datagram
 *	from many pieces of data. Each pieces will be holded on the socket
 *	until ip_push_pending_frames() is called. Each piece can be a page
 *	or non-page data.
 *
 *	Not only UDP, other transport protocols - e.g. raw sockets - can use
 *	this interface potentially.
 *
 *	LATER: length must be adjusted by pad at tail, when it is required.
 */
----

==== 对GSO的支持
struct sk_buff *inet_gso_segment(struct sk_buff *skb, netdev_features_t features):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/af_inet.c

=== IP选项
概念:
IPv4允许最大选项长度40个字节，因此IPv4 header最大为60字节。

结构:
struct ip_options: https://elixir.bootlin.com/linux/latest/source/include/net/inet_sock.h

操作:
ip_options_build(), ip_options_fragment()等:
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_options.c

参考:
https://en.wikipedia.org/wiki/Internet_Protocol_version_4#Header

=== IP的分片与组装
==== 分片(fragment)
如果IP数据报发送长度超过最大传输单元即MTU时，就需要对其进行分片。

[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c
----
static int ip_fragment(struct net *net, struct sock *sk, struct sk_buff *skb,
		       unsigned int mtu,
		       int (*output)(struct net *, struct sock *, struct sk_buff *))
----
核心函数:
int ip_do_fragment(struct net *net, struct sock *sk, struct sk_buff *skb, int (*output)(struct net *, struct sock *, struct sk_buff *))
快路径与慢路径:
不需要分片的IP packet或者已经按分片负载的长度分配好了buffer只要加个头的情况，属于快路径；
需要从头开始进行分配的IP packet，属于慢速路径。

==== 组装(重组)
在接收方，一个由发送方发出的IP数据报，其所有分片将被重新组合，然后提交给上层协议。

每个正在被重组的IP packet都会用一个ipq结构表示:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_fragment.c
----
/* Describe an entry in the "incomplete datagrams" queue. */
struct ipq {
	struct inet_frag_queue q;

	u8		ecn; /* RFC3168 support */
	u16		max_df_size; /* largest frag with DF set seen */
	int             iif;
	unsigned int    rid;
	struct inet_peer *peer;
};
----

[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_fragment.c
----
int ip_defrag(struct net *net, struct sk_buff *skb, u32 user)
----

==== 参考
https://ggaaooppeenngg.github.io/zh-CN/2017/07/10/IP-%E7%9A%84%E5%88%86%E7%89%87%E4%B8%8E%E9%87%8D%E7%BB%84/

=== IP组播
- IP报文网络传输的三种模式
    
    单播是主机间一对一的通讯模式
    
    广播是主机间一对所有的通讯模式
    广播方式下，发送者与用户主机被限制在一个共享网段中，且该网段所有用户主机都能接收到该信息，可能导致冗余和不安全。

    组播是主机间一对多的通讯模式
    组播可以跨网段传输，不需要此报文的用户不能收到此报文
    相比广播来说，使用组播方式可以远距离传输信息，并且只会将信息传输到相应的接收者，保障了信息的安全性。

初始化:
int __init ip_mr_init(void):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ipmr.c

虚拟接口:
struct vif_device:
https://elixir.bootlin.com/linux/latest/source/include/linux/mroute_base.h

组播转发缓存:
struct mfc_cache:
https://elixir.bootlin.com/linux/latest/source/include/linux/mroute.h

struct mr_table:
https://elixir.bootlin.com/linux/latest/source/include/linux/mroute_base.h

组播报文的输入:
int ip_mr_input(struct sk_buff *skb):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ipmr.c

组播报文的转发:
void ip_mr_forward(struct net *net, struct mr_table *mrt, struct net_device *dev, struct sk_buff *skb, struct mfc_cache *c, int local):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ipmr.c

组播报文的输出:
int ip_mc_output(struct net *net, struct sock *sk, struct sk_buff *skb):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c

=== 路由
==== 路由表
fib: Forwarding Information Base, 即路由表。

一个路由表中的路由项数量，在一般主机中可能是几条，在路由器中则可能是数十万条。

version 2.6.39:
IPv4: Remove the hash based routing table implementation, make the FIB Trie implementation the default
参考:
https://kernelnewbies.org/Linux_2_6_39#Networking
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3630b7c050d9c3564f143d595339fc06b888d6f3

struct fib_table: 路由表
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/ip_fib.h
----
struct fib_table {
	struct hlist_node	tb_hlist;
	u32			tb_id;
	int			tb_num_default;
	struct rcu_head		rcu;
	unsigned long 		*tb_data;
	unsigned long		__data[];
};
----

struct fib_alias: https://elixir.bootlin.com/linux/latest/source/net/ipv4/fib_lookup.h
标识一条路由表项。

struct fib_info: https://elixir.bootlin.com/linux/latest/source/include/net/ip_fib.h
存储下一条网关等重要的路由信息。

struct fib_nh: https://elixir.bootlin.com/linux/latest/source/include/net/ip_fib.h
下一跳路由的地址。

初始化:

    void __init ip_init(void)
        int __init ip_rt_init(void)
            void __init ip_fib_init(void)
                void __init fib_trie_init(void)

netlink接口:
inet_rtm_delroute(), inet_rtm_newroute():
https://elixir.bootlin.com/linux/latest/source/net/ipv4/fib_frontend.c

fib_new_table(): https://elixir.bootlin.com/linux/latest/source/include/net/ip_fib.h
获取指定的路由表。

路由表项的插入与删除:
fib_table_insert(), fib_table_delete()

外部事件:
fib_inetaddr_event(): IP地址变化
fib_netdev_event(): 网络设备状态变化

输入选路: ip_route_input_slow()
组播输入选路: ip_route_input_mc()
输出选路: ip_route_output_slow()

ICMP重定向消息的发送: ip_rt_send_redirect()

注:
IPv6参考: https://elixir.bootlin.com/linux/latest/source/include/net/ip6_fib.h

==== 路由缓存

==== 路由策略

=== ICMP
ICMP是什么？
因特网控制报文协议ICMP(Internet Control Message Protocol)
ICMP是一个差错报告机制，主要用于在IP主机和路由器之间传递控制消息，用于报告主机是否可达、路由是否可用等。它虽然并不传输用户数据，但是对于收集各种网络信息、诊断和排除各种网络故障以及用户数据的传递作用重大。

为什么需要ICMP？
在数据传输的过程中，IP提供尽力而为的服务，指为了把数据包发送到目的地址尽最大努力。它并不对目的主机是否收到数据包进行验证，无法进行流量控制和差错控制。因此在数据包传输过程中，产生各种错误在所难免。为了更有效地转发IP数据包和提高数据包交付成功的机会，ICMP应运而生。使用ICMP，当网络中数据包传输出现问题时，主机或设备就会向上层协议报告差错情况和提供有关异常情况的报告，使得上层协议能够通过自己的差错控制程序来判断通信是否正确，以进行流量控制和差错控制，从而保证服务质量。

典型应用:
ping程序和tracer/traceroute程序，网络质量分析NQA(Network Quality Analysis)等。

协议:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/af_inet.c
----
static const struct net_protocol icmp_protocol = {
	.handler =	icmp_rcv,
	.err_handler =	icmp_err,
	.no_policy =	1,
};
----

初始化:
int __init icmp_init(void):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/icmp.c

输入:
int icmp_rcv(struct sk_buff *skb):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/icmp.c

输出:
void __icmp_send(struct sk_buff *skb_in, int type, int code, __be32 info, const struct ip_options *opt):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/icmp.c

=== IGMP
IGMP(Internet Group Management Protocol)
IMGP是互联网组管理协议是TCP/IP协议族中负责IP组播成员管理的协议，用来在IP主机和与其直接相邻的组播路由器之间建立、维护组播组成员关系。

IGMP报文的输入:
int igmp_rcv(struct sk_buff *skb):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/igmp.c

=== 邻居子系统
==== 概念
- 邻居
连接在同一LAN上的主机具有相同的L3网络配置互为邻居。
另一种定义邻居的方式是主机到其邻居有且只有一个L3跃点。并且它的路由表必须提供可以直接和其邻居通信的路径。不是邻居的主机通信必须经过网管或者路由器。​
注意: 一个邻居并不代表一个主机，而是一个三层协议地址，对于配置了多接口的主机，一个主机将对应多个三层协议地址。

- 作用
邻居子系统提供了三层协议地址与二层协议地址之间的映射关系。

- 协议
IPV4的ARP协议
IPV6的ND协议，ND协议在IPV6作为ICMP的一部分。

- 命令
ip neighbor

==== 数据结构
===== struct neigh_table
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/neighbour.h
----
struct neigh_table {
	int			family;
	unsigned int		entry_size;
	unsigned int		key_len;
	__be16			protocol;
	__u32			(*hash)(const void *pkey,
					const struct net_device *dev,
					__u32 *hash_rnd);
	bool			(*key_eq)(const struct neighbour *, const void *pkey);
	int			(*constructor)(struct neighbour *);
	int			(*pconstructor)(struct pneigh_entry *);
	void			(*pdestructor)(struct pneigh_entry *);
	void			(*proxy_redo)(struct sk_buff *skb);
	int			(*is_multicast)(const void *pkey);
	bool			(*allow_add)(const struct net_device *dev,
					     struct netlink_ext_ack *extack);
	char			*id;
	struct neigh_parms	parms;
	struct list_head	parms_list;
	int			gc_interval;
	int			gc_thresh1;
	int			gc_thresh2;
	int			gc_thresh3;
	unsigned long		last_flush;
	struct delayed_work	gc_work;
	struct delayed_work	managed_work;
	struct timer_list 	proxy_timer;
	struct sk_buff_head	proxy_queue;
	atomic_t		entries;
	atomic_t		gc_entries;
	struct list_head	gc_list;
	struct list_head	managed_list;
	rwlock_t		lock;
	unsigned long		last_rand;
	struct neigh_statistics	__percpu *stats;
	struct neigh_hash_table __rcu *nht;
	struct pneigh_entry	**phash_buckets;
};
----

===== struct neighbour
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/neighbour.h
----
struct neighbour {
	struct neighbour __rcu	*next;
	struct neigh_table	*tbl;
	struct neigh_parms	*parms;
	unsigned long		confirmed;
	unsigned long		updated;
	rwlock_t		lock;
	refcount_t		refcnt;
	unsigned int		arp_queue_len_bytes;
	struct sk_buff_head	arp_queue;
	struct timer_list	timer;
	unsigned long		used;
	atomic_t		probes;
	u8			nud_state;
	u8			type;
	u8			dead;
	u8			protocol;
	u32			flags;
	seqlock_t		ha_lock;
	unsigned char		ha[ALIGN(MAX_ADDR_LEN, sizeof(unsigned long))] __aligned(8);
	struct hh_cache		hh;
	int			(*output)(struct neighbour *, struct sk_buff *);
	const struct neigh_ops	*ops;
	struct list_head	gc_list;
	struct list_head	managed_list;
	struct rcu_head		rcu;
	struct net_device	*dev;
	netdevice_tracker	dev_tracker;
	u8			primary_key[0];
} __randomize_layout;
----

struct neigh_table	*tbl: 指向相关协议的neigh_table实例，即该邻居项所在的邻居表。如果该邻居项对应的是一个IPv4地址，则该字段指向arp_tbl。

u8			nud_state: 邻居项状态。

struct hh_cache		hh: hardware header, 缓存二层首部。

int			(*output)(struct neighbour *, struct sk_buff *):
输出函数，用来将报文输出到该邻居。在邻居项的整个生命周期中，其状态是不断变化的，导致该函数指针会指向不同的输出函数。例如邻居可达时会调用neigh_connect()将output设置为neigh->ops->connected_output。

const struct neigh_ops	*ops: 指向邻居项函数表实例。

struct net_device	*dev: 通过该网络设备可以访问到此邻居。

u8			primary_key[0]:
存储哈希函数使用的三层协议地址，实际使用空间会根据三层协议地址长度进行动态分配，对于IPv4，是32位IP地址。

===== struct neigh_ops
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/neighbour.h
----
struct neigh_ops {
	int			family;
	void			(*solicit)(struct neighbour *, struct sk_buff *);
	void			(*error_report)(struct neighbour *, struct sk_buff *);
	int			(*output)(struct neighbour *, struct sk_buff *);
	int			(*connected_output)(struct neighbour *, struct sk_buff *);
};
----

==== 邻居表初始化
void neigh_table_init(int index, struct neigh_table *tbl):
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

IPv4调用时机:

    int __init inet_init(void): https://elixir.bootlin.com/linux/latest/source/net/ipv4/af_inet.c
        void __init arp_init(void): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c

IPv6调用时机:

    int __init inet6_init(void): https://elixir.bootlin.com/linux/latest/source/net/ipv6/af_inet6.c
        int __init ndisc_init(void): https://elixir.bootlin.com/linux/latest/source/net/ipv6/ndisc.c
    
==== 邻居项状态
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/net/neighbour.h
----
/*
 * NUD stands for "neighbor unreachability detection"
 */

#define NUD_IN_TIMER	(NUD_INCOMPLETE|NUD_REACHABLE|NUD_DELAY|NUD_PROBE)
#define NUD_VALID	(NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE|NUD_PROBE|NUD_STALE|NUD_DELAY)
#define NUD_CONNECTED	(NUD_PERMANENT|NUD_NOARP|NUD_REACHABLE)
----

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/neighbour.h
----
/*
 *	Neighbor Cache Entry States.
 */

#define NUD_INCOMPLETE	0x01
#define NUD_REACHABLE	0x02
#define NUD_STALE	0x04
#define NUD_DELAY	0x08
#define NUD_PROBE	0x10
#define NUD_FAILED	0x20

/* Dummy states */
#define NUD_NOARP	0x40
#define NUD_PERMANENT	0x80
#define NUD_NONE	0x00
----

==== 邻居项的添加与删除
neigh_add(), neigh_delete():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 邻居项的创建与初始化
neigh_alloc(), __neigh_create():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 邻居项散列表的扩容
neigh_hash_grow():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 邻居项的查找
neigh_lookup():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 邻居项的更新
neigh_update():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 邻居项的定时器
neigh_timer_handler():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 垃圾回收
同步回收:
neigh_forced_gc(): https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

异步回收:
neigh_periodic_work(): https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 外部事件
neigh_ifdown(), neigh_changeaddr():
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 代理项
创建与查找:pneigh_lookup(..., int creat)
删除: pneigh_delete()
延时处理代理的请求报文: pneigh_enqueue() neigh_proxy_process()
https://elixir.bootlin.com/linux/latest/source/net/core/neighbour.c

==== 输出函数
邻居子系统提供了多个输出报文的函数，例如neigh_connect(), neigh_suspect(), 这些函数用来初始化neigh_ops结构实例，如IPv4中的arp_generic_ops, arp_hh_ops等。
邻居项状态发生变化时，根据状态选取适当的输出函数。

丢弃报文:
neigh_blackhole()

慢速发送:
neigh_resolve_output()

快速发送:
ip_finish_output2()
https://elixir.bootlin.com/linux/latest/source/net/ipv4/ip_output.c

=== ARP
地址解析协议(Address Resolution Protocol)
IP地址(32位)和以太网地址(48位)之间存在着映射，查看ARP表即可以确定两个地址之间的对应关系。

ARP协议并不仅仅被IPv4使用，在内核的网络模块代码中使用SIP(Source IP address)和TIP(Target IP address)来代表发送方IP地址和目的IP地址。

协议头:
struct arphdr: https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/if_arp.h

ARP报文类型:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
----
static struct packet_type arp_packet_type __read_mostly = {
	.type =	cpu_to_be16(ETH_P_ARP),
	.func =	arp_rcv,
};
----

ARP初始化:
void __init arp_init(void): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c

ARP的邻居项函数指针表:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
----
static const struct neigh_ops arp_generic_ops = {
	.family =		AF_INET,
	.solicit =		arp_solicit,
	.error_report =		arp_error_report,
	.output =		neigh_resolve_output,
	.connected_output =	neigh_connected_output,
};

static const struct neigh_ops arp_hh_ops = {
	.family =		AF_INET,
	.solicit =		arp_solicit,
	.error_report =		arp_error_report,
	.output =		neigh_resolve_output,
	.connected_output =	neigh_resolve_output,
};

static const struct neigh_ops arp_direct_ops = {
	.family =		AF_INET,
	.output =		neigh_direct_output,
	.connected_output =	neigh_direct_output,
};
----
arp_generic_ops: 通用的ops
arp_hh_ops: 支持缓存硬件首部的ops
arp_direct_ops: 不支持arp的ops

struct neigh_table arp_tbl:
https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c

arp_error_report(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
调用dst_link_failure()向三层报告错误。

arp_solicit(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
发送ARP请求。

arp_ignore(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
根据过滤规则对输入ARP报文中源，目标IP地址进行确认，返回值非0表示需要过滤。

arp_filter(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
根据ARP请求报文中的发送方IP地址和目的IP地址，查找输出到ARP请求报文发送方的路由，过滤掉查找路由失败或者路由输出设备与输入ARP请求报文的设备不同的ARP请求报文。

int arp_constructor(struct neighbour *neigh): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
APR的邻居初始化函数，用来初始化新的neighbour实例，在邻居表创建函数neigh_create()中被调用。

ARP的输出:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
----
/* Create and send an arp packet. */
static void arp_send_dst(int type, int ptype, __be32 dest_ip,
			 struct net_device *dev, __be32 src_ip,
			 const unsigned char *dest_hw,
			 const unsigned char *src_hw,
			 const unsigned char *target_hw,
			 struct dst_entry *dst)
{
	struct sk_buff *skb;

	/* arp on this interface. */
	if (dev->flags & IFF_NOARP)
		return;

	skb = arp_create(type, ptype, dest_ip, dev, src_ip,
			 dest_hw, src_hw, target_hw);
	if (!skb)
		return;

	skb_dst_set(skb, dst_clone(dst));
	arp_xmit(skb);
}

void arp_send(int type, int ptype, __be32 dest_ip,
	      struct net_device *dev, __be32 src_ip,
	      const unsigned char *dest_hw, const unsigned char *src_hw,
	      const unsigned char *target_hw)
{
	arp_send_dst(type, ptype, dest_ip, dev, src_ip, dest_hw, src_hw,
		     target_hw, NULL);
}
----
其中，arp_xmit():
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
----
static int arp_xmit_finish(struct net *net, struct sock *sk, struct sk_buff *skb)
{
	return dev_queue_xmit(skb);
}

/*
 *	Send an arp packet.
 */
void arp_xmit(struct sk_buff *skb)
{
	/* Send it off, maybe filter it using firewalling first.  */
	NF_HOOK(NFPROTO_ARP, NF_ARP_OUT,
		dev_net(skb->dev), NULL, skb, NULL, skb->dev,
		arp_xmit_finish);
}
----

ARP的输入:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
----
/*
 *	Receive an arp request from the device layer.
 */

static int arp_rcv(struct sk_buff *skb, struct net_device *dev,
		   struct packet_type *pt, struct net_device *orig_dev)
{
	const struct arphdr *arp;

	/* do not tweak dropwatch on an ARP we will ignore */
	if (dev->flags & IFF_NOARP ||
	    skb->pkt_type == PACKET_OTHERHOST ||
	    skb->pkt_type == PACKET_LOOPBACK)
		goto consumeskb;

	skb = skb_share_check(skb, GFP_ATOMIC);
	if (!skb)
		goto out_of_mem;

	/* ARP header, plus 2 device addresses, plus 2 IP addresses.  */
	if (!pskb_may_pull(skb, arp_hdr_len(dev)))
		goto freeskb;

	arp = arp_hdr(skb);
	if (arp->ar_hln != dev->addr_len || arp->ar_pln != 4)
		goto freeskb;

	memset(NEIGH_CB(skb), 0, sizeof(struct neighbour_cb));

	return NF_HOOK(NFPROTO_ARP, NF_ARP_IN,
		       dev_net(dev), NULL, skb, dev, NULL,
		       arp_process);

consumeskb:
	consume_skb(skb);
	return NET_RX_SUCCESS;
freeskb:
	kfree_skb(skb);
out_of_mem:
	return NET_RX_DROP;
}
----
其中，arp_process():
https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c

ARP代理:
通常路由器这样的设备才会使用，用来代替处于另一个网段的主机回答某网段主机的ARP请求。
如果ARP请求是从一个网络的主机发往另一个网络的主机，那么连接这两个网络的路由器就可以回答该请求，这个过程称为ARP代理。
arp_fwd_proxy(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
检查是否允许进行ARP代理。
parp_redo(): https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c
缓存代理ARP报文的处理函数，会被定时器到期激活。

arp_ioctl():
https://elixir.bootlin.com/linux/latest/source/net/ipv4/arp.c

外部事件:
NETDEV_CHANGEADDR: arp_netdev_event()
NETDEV_DOWN: arp_ifdown()

=== NDP
邻居发现协议NDP(Neighbor Discovery Protocol)是IPv6协议体系中一个重要的基础协议。
邻居发现协议替代了IPv4的ARP(Address Resolution Protocol)和ICMP路由器发现(Router Discovery)，它定义了使用ICMPv6报文实现地址解析，跟踪邻居状态，重复地址检测，路由器发现以及重定向等功能。