:toc:
:toclevels: 5
:hardbreaks-option:

== 网络层

=== 概念
网络层输入接口packet_type在链路层和网络层起到桥梁作用。
例如在以太网上，当以太网帧到达主机后，内核会根据协议族的报文类型调用相应的网络层接收处理函数。

=== 结构
==== struct packet_type
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/netdevice.h
----
struct packet_type {
	__be16			type;	/* This is really htons(ether_type). */
	bool			ignore_outgoing;
	struct net_device	*dev;	/* NULL is wildcarded here	     */
	netdevice_tracker	dev_tracker;
	int			(*func) (struct sk_buff *,
					 struct net_device *,
					 struct packet_type *,
					 struct net_device *);
	void			(*list_func) (struct list_head *,
					      struct packet_type *,
					      struct net_device *);
	bool			(*id_match)(struct packet_type *ptype,
					    struct sock *sk);
	struct net		*af_packet_net;
	void			*af_packet_priv;
	struct list_head	list;
};
----

ipv4:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv4/af_inet.c
----
static struct packet_type ip_packet_type __read_mostly = {
	.type = cpu_to_be16(ETH_P_IP),
	.func = ip_rcv,
	.list_func = ip_list_rcv,
};
----

ipv6:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/net/ipv6/af_inet6.c
----
static struct packet_type ipv6_packet_type __read_mostly = {
	.type = cpu_to_be16(ETH_P_IPV6),
	.func = ipv6_rcv,
	.list_func = ipv6_list_rcv,
};
----

=== 流量控制

==== 历史
2.2版本之前，不支持服务质量: 所有IP数据报采用FIFO，并尽最大努力传输，如果发生拥塞，路由器便会直接丢弃数据包。
随着网络的发展和数据量的增长，简单丢弃数据包的方式已经不再适用了，新的版本增加了QoS功能，目的是针对不同的需求，提供不同服务质量的网络服务功能。

==== 输出的流量控制

==== 实现

==== FIFO

=== 地址
struct in_device: https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h
struct in_ifaddr: https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h

static struct in_device *inetdev_init(struct net_device *dev):
static void inetdev_destroy(struct in_device *in_dev):
https://elixir.bootlin.com/linux/latest/source/net/ipv4/devinet.c

int inet_addr_onlink(struct in_device *in_dev, __be32 a, __be32 b):
__be32 inet_select_addr(const struct net_device *dev, __be32 dst, int scope):
__be32 inet_confirm_addr(struct net *net, struct in_device *in_dev, __be32 dst, __be32 local, int scope)等:
https://elixir.bootlin.com/linux/latest/source/include/linux/inetdevice.h

=== 分片与组装

=== 路由