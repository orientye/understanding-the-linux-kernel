:toc:
:toclevels: 5
:hardbreaks-option:

== 数据的接收

=== 过程概述
加载网卡驱动，初始化
数据包从外部网络进入网卡
网卡(通过DMA)将包拷贝到内核内存中的ring buffer
产生硬件中断，通知系统收到了一个包
驱动调用NAPI，如果轮询(poll)还没有开始，就开始轮询
ksoftirqd软中断调用NAPI的poll函数从ring buffer收包(poll函数是网卡驱动在初始化阶段注册的；每个cpu上都运行着一个ksoftirqd进程，在系统启动期间就注册了)
ring buffer里面对应的内存区域解除映射(unmapped)
如果packet steering功能打开，或者网卡有多队列，网卡收到的数据包会被分发到多个cpu
数据包从队列进入协议层，协议层处理数据包，数据包从协议层进入相应socket的接收队列: poll函数将收到的包送到协议栈注册的ip_rcv函数中，ip_rcv函数再将包送到tcp_v4_rcv函数或udp_rcv函数中。

硬中断处理:
当数据帧从网线到达网卡上的时候，网卡会在分配给自己的ring buffer中寻找可以使用的内存位置，找到后DMA会把数据DMA到⽹卡之前关联的内存⾥，此时CPU是没有感知的。当DMA操作完成以后，网卡会向CPU发起⼀个硬中断，通知CPU有数据到达。
这个过程中，如果ring buffer满了，新来的数据包将会被丢弃(ifconfig命令查看网卡，可以看到overruns信息项，表示因为环形队列满被丢弃的包，此时可以通过ethtool命令来加大队列的长度)。

软中断处理:
open_softirq(NET_RX_SOFTIRQ, net_rx_action);
net_rx_action(): https://elixir.bootlin.com/linux/latest/source/net/core/dev.c

参考:
https://zhuanlan.zhihu.com/p/483820172

==== 具体过程

===== 系统调用
无论是socket fd的read系统调用，还是recvfrom/recv/recvmsg系统调用，最终都会调用sock_recvmsg()。

=== 参考
