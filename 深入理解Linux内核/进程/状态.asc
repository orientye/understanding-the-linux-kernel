:toc:
:toclevels: 5
:hardbreaks-option:

== 状态

=== TASK状态
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/sched.h
----
/* Used in tsk->state: */
#define TASK_RUNNING			0x0000
#define TASK_INTERRUPTIBLE		0x0001
#define TASK_UNINTERRUPTIBLE		0x0002
#define __TASK_STOPPED			0x0004
#define __TASK_TRACED			0x0008
/* Used in tsk->exit_state: */
#define EXIT_DEAD			0x0010
#define EXIT_ZOMBIE			0x0020
#define EXIT_TRACE			(EXIT_ZOMBIE | EXIT_DEAD)
/* Used in tsk->state again: */
#define TASK_PARKED			0x0040
#define TASK_DEAD			0x0080
#define TASK_WAKEKILL			0x0100
#define TASK_WAKING			0x0200
#define TASK_NOLOAD			0x0400
#define TASK_NEW			0x0800
/* RT specific auxilliary flag to mark RT lock waiters */
#define TASK_RTLOCK_WAIT		0x1000
#define TASK_STATE_MAX			0x2000

/* Convenience macros for the sake of set_current_state: */
#define TASK_KILLABLE			(TASK_WAKEKILL | TASK_UNINTERRUPTIBLE)
#define TASK_STOPPED			(TASK_WAKEKILL | __TASK_STOPPED)
#define TASK_TRACED			__TASK_TRACED

#define TASK_IDLE			(TASK_UNINTERRUPTIBLE | TASK_NOLOAD)

/* Convenience macros for the sake of wake_up(): */
#define TASK_NORMAL			(TASK_INTERRUPTIBLE | TASK_UNINTERRUPTIBLE)

/* get_task_state(): */
#define TASK_REPORT			(TASK_RUNNING | TASK_INTERRUPTIBLE | \
					 TASK_UNINTERRUPTIBLE | __TASK_STOPPED | \
					 __TASK_TRACED | EXIT_DEAD | EXIT_ZOMBIE | \
					 TASK_PARKED)

#define task_is_running(task)		(READ_ONCE((task)->__state) == TASK_RUNNING)

#define task_is_traced(task)		((READ_ONCE(task->jobctl) & JOBCTL_TRACED) != 0)
#define task_is_stopped(task)		((READ_ONCE(task->jobctl) & JOBCTL_STOPPED) != 0)
#define task_is_stopped_or_traced(task)	((READ_ONCE(task->jobctl) & (JOBCTL_STOPPED | JOBCTL_TRACED)) != 0)
----

- TASK_RUNNING

    正在运行或可以运行(即就绪)
    对应ps命令里的R: running or runnable (on run queue)

- TASK_INTERRUPTIBLE

    可中断睡眠状态
    对应ps命令里的S: interruptible sleep (waiting for an event to complete)

- TASK_UNINTERRUPTIBLE

    不可中断睡眠状态
    对应ps命令里的D: uninterruptible sleep (usually IO)

- __TASK_STOPPED

    停止状态
    进程收到SIGTOP/SIGTTIN/SIGTSTP/SIGTTOU等信号会进入该状态
    对应ps命令里的T: stopped by job control signal

- __TASK_TRACED

    停止状态
    被debugger调试停止
    对应ps命令里的t: stopped by debugger during the tracing

- EXIT_DEAD

    资源已被父进程回收 ，进程结束
    对应ps命令里的X: dead (should never be seen)

- EXIT_ZOMBIE

    进程结束前先进入该状态，等待父进程释放某些资源
    对应ps命令里的Z: defunct ("zombie") process, terminated but not reaped by its parent

- TASK_PARKED

    __kthread_parkme(): https://elixir.bootlin.com/linux/latest/source/kernel/kthread.c
    https://lore.kernel.org/all/20180430141751.377491406@infradead.org/T/
    对应ps命令里的P: park机制的主要作用是支持cpu hotplug

- 进程状态转换图
image:https://s3.eu-west-1.amazonaws.com/redsys-prod/articles/1fd2a10f4794bb2e43729fec/images/image1.png[]
.Image source: https://s3.eu-west-1.amazonaws.com/redsys-prod/articles/1fd2a10f4794bb2e43729fec/images/image1.png[window=read-later]

- task_state_array
[source, c]
----
https://elixir.bootlin.com/linux/latest/source/fs/proc/array.c
/*
 * The task state array is a strange "bitmap" of
 * reasons to sleep. Thus "running" is zero, and
 * you can test for combinations of others with
 * simple bit tests.
 */
static const char * const task_state_array[] = {

	/* states in TASK_REPORT: */
	"R (running)",		/* 0x00 */
	"S (sleeping)",		/* 0x01 */
	"D (disk sleep)",	/* 0x02 */
	"T (stopped)",		/* 0x04 */
	"t (tracing stop)",	/* 0x08 */
	"X (dead)",		/* 0x10 */
	"Z (zombie)",		/* 0x20 */
	"P (parked)",		/* 0x40 */

	/* states beyond TASK_REPORT: */
	"I (idle)",		/* 0x80 */
};
----

参考: https://garlicspace.com/2019/06/29/linux%E4%BB%BB%E5%8A%A1%E7%8A%B6%E6%80%81%E5%AE%9A%E4%B9%89/

=== 内核态与用户态
- 概念

    内核态用户态指的是CPU在执行指令时所位于的特权层级

- 作用: 稳定性

- 特权级

    x86 CPU hardware actually provides four protection rings: 0, 1, 2, and 3. 
    Only rings 0 (Kernel) and 3 (User) are typically used.
    CPL DPL RPL:
    这三个特权级均由两位bit组成，可以表示0～3共4个等级。
    CPL: current privilege level，存放在代码段寄存器中(CS)，代表当前执行程序的特权级
    RPL: request privilege level，请求特权级，存放在段选择子中
    DPL: descriptor privilege level，存放在段描述符中，用于表示段的特权级
    在保护模式下，CPU利用CPL/RPL/DPL对程序的访问操作进行特权级检查，数据段和代码段的特权级检查规则有所不同。

- 切换
  
    ▪ 系统调用
    ▪ 中断
    ▪ 异常

- 每个处理器在任何指定时间上的活动必然为以下之一:

    ▪ 运行在用户空间, 执行用户进程
    ▪ 运行在内核空间, 处于进程上下文, 代表某个特定的进程执行
    ▪ 运行在内核空间, 处于中断上下文, 与任何进程无关, 处理某个特定的中断

- 如何判定当前是在用户态还是内核态
task_struct->mm为空：内核态，否则为用户态