:toc:
:toclevels: 5
:hardbreaks-option:

== 调度

=== 演进
▪ 抢占(preemptive)
Prior to Linux kernel version 2.5.4, Linux Kernel was not preemptive which means a process running in kernel mode cannot be moved out of processor until it itself leaves the processor or it starts waiting for some input output operation to get complete.
参考: https://stackoverflow.com/questions/5283501/what-does-it-mean-to-say-linux-kernel-is-preemptive


▪ 普通进程调度器(SCHED_OTHER)
O(1)调度器 -> CFS调度器(Completely Fair Scheduler)
具体来说:
基于时间片轮询调度算法O(n)(2.6之前的版本)
O(1)调度算法(2.6.23之前的版本)
完全公平调度算法(2.6.23以及之后的版本)

▪ SCHED_IDLE
Since 2.6.23
系统在空闲时，每个CPU都有一个idle线程在跑，它什么也不做，就是把CPU放入硬件睡眠状态以节能(需要特定CPU的driver支持), 并等待新的任务到来，以将CPU从睡眠状态中唤醒。

▪ SCHED_BATCH
Since Linux 2.6.16

参考: https://www.zhihu.com/question/35484429

=== 目的
调度器的任务是分配CPU资源，目标是兼顾效率和公平。
效率主要体现为吞吐量和延迟，吞吐量和延迟是一对相互矛盾的指标，例如有两种比较典型的任务: 强调吞吐量对延迟不敏感的CPU密集型，以及延迟敏感不太在意吞吐量的IO密集型。
效率还需要考虑到进程具有不同的优先级。
公平是让每个任务都有机会获得调度，同时为了效率，需要不同的策略。

=== 策略与优先级
ps -eLfc可以在CLS查看调度策略
cls         CLS       scheduling class of the process.(alias policy, cls). 
Field's possible values are:
    -   not reported
    TS  SCHED_OTHER
    FF  SCHED_FIFO
    RR  SCHED_RR
    B   SCHED_BATCH
    ISO SCHED_ISO
    IDL SCHED_IDLE
    DLN SCHED_DEADLINE
    ?   unknown value

- SCHED_FIFO
- SCHED_RR
这两个调度策略定义了对实时任务，即对延时和限定性的完成时间的高敏感度的任务。
前者提供FIFO语义，相同优先级的任务先到先服务，高优先级的任务可以抢占低优先级的任务；
后者提供Round-Robin语义，采用时间片，相同优先级的任务当用完时间片会被放到队列尾部，以保证公平性，同样，高优先级的任务可以抢占低优先级的任务。不同要求的实时任务可以根据需要用sched_setscheduler()API设置策略。

- SCHED_OTHER此调度策略包含除上述实时进程之外的其他进程，亦称普通进程。采用分时策略，根据动态优先级(可用nice()API设置），分配CPU运算资源。
注意：这类进程比上述两类实时进程优先级低，换言之，在有实时进程存在时，实时进程优先调度。

Linux除了实现上述策略，还额外支持以下策略：
- SCHED_IDLE优先级最低，在系统空闲时才跑这类进程
- SCHED_BATCH是SCHED_OTHER策略的分化，与SCHED_OTHER策略一样，但针对吞吐量优化
- SCHED_DEADLINE是新支持的实时进程调度策略，针对突发型计算，且对延迟和完成时间高度敏感的任务适用。

除了完成以上基本任务外，Linux调度器还应提供高性能保障，对吞吐量和延时的均衡要有好的优化；要提供高可扩展性(scalability)保障，保障上千节点的性能稳定；对于广泛作为服务器领域操作系统来说，它还提供丰富的组策略调度和节能调度的支持。

参考: https://www.zhihu.com/question/35484429/answer/62964898

[source,c]
.https://github.com/torvalds/linux/blob/master/include/uapi/linux/sched.h
----
/*
 * Scheduling policies
 */
#define SCHED_NORMAL    0
#define SCHED_FIFO		1
#define SCHED_RR		2
#define SCHED_BATCH		3
/* SCHED_ISO: reserved but not implemented yet */
#define SCHED_IDLE		5
#define SCHED_DEADLINE  6
----

__schedule函数: https://github.com/torvalds/linux/blob/master/kernel/sched/core.c

==== 完全公平调度
https://www.kernel.org/doc/Documentation/scheduler/sched-design-CFS.txt

==== 实时调度

==== 调度增强

=== v0.12
https://elixir.bootlin.com/linux/0.12/source/kernel/sched.c