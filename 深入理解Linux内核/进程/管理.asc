:toc:
:toclevels: 5
:hardbreaks-option:

== 管理

=== 创建/复制
- old

    fork copy-on-write(COW)
    vfork 效率较慢, 避免使用
    clone 产生线程

    三个函数最后都会调用do_fork, 参数不同而已
    fork/vfork/clone
        sys_fork/sys_vfork/sys_clone
            kernel/fork.c
                do_fork
                    copy_process

- now
https://elixir.bootlin.com/linux/latest/source/kernel/fork.c

    struct task_struct * __init fork_idle(int cpu) //smpboot
    struct task_struct *create_io_thread(int (*fn)(void *), void *arg, int node)//for io_uring
    pid_t kernel_clone(struct kernel_clone_args *args)//main
        copy_process(struct pid *pid, int trace, int node, struct kernel_clone_args *args)


[source,c]
.https://elixir.bootlin.com/linux/latest/source/include/uapi/linux/sched.h
----

/*
 * cloning flags:
 */
#define CSIGNAL		0x000000ff	/* signal mask to be sent at exit */
#define CLONE_VM	0x00000100	/* set if VM shared between processes */
#define CLONE_FS	0x00000200	/* set if fs info shared between processes */
#define CLONE_FILES	0x00000400	/* set if open files shared between processes */
#define CLONE_SIGHAND	0x00000800	/* set if signal handlers and blocked signals shared */
#define CLONE_PIDFD	0x00001000	/* set if a pidfd should be placed in parent */
#define CLONE_PTRACE	0x00002000	/* set if we want to let tracing continue on the child too */
#define CLONE_VFORK	0x00004000	/* set if the parent wants the child to wake it up on mm_release */
#define CLONE_PARENT	0x00008000	/* set if we want to have the same parent as the cloner */
#define CLONE_THREAD	0x00010000	/* Same thread group? */
#define CLONE_NEWNS	0x00020000	/* New mount namespace group */
#define CLONE_SYSVSEM	0x00040000	/* share system V SEM_UNDO semantics */
#define CLONE_SETTLS	0x00080000	/* create a new TLS for the child */
#define CLONE_PARENT_SETTID	0x00100000	/* set the TID in the parent */
#define CLONE_CHILD_CLEARTID	0x00200000	/* clear the TID in the child */
#define CLONE_DETACHED		0x00400000	/* Unused, ignored */
#define CLONE_UNTRACED		0x00800000	/* set if the tracing process can't force CLONE_PTRACE on this clone */
#define CLONE_CHILD_SETTID	0x01000000	/* set the TID in the child */
#define CLONE_NEWCGROUP		0x02000000	/* New cgroup namespace */
#define CLONE_NEWUTS		0x04000000	/* New utsname namespace */
#define CLONE_NEWIPC		0x08000000	/* New ipc namespace */
#define CLONE_NEWUSER		0x10000000	/* New user namespace */
#define CLONE_NEWPID		0x20000000	/* New pid namespace */
#define CLONE_NEWNET		0x40000000	/* New network namespace */
#define CLONE_IO		0x80000000	/* Clone io context */

/* Flags for the clone3() syscall. */
#define CLONE_CLEAR_SIGHAND 0x100000000ULL /* Clear any signal handler and reset to SIG_DFL. */
#define CLONE_INTO_CGROUP 0x200000000ULL /* Clone into a specific cgroup given the right permissions. */

/*
 * cloning flags intersect with CSIGNAL so can be used with unshare and clone3
 * syscalls only:
 */
#define CLONE_NEWTIME	0x00000080	/* New time namespace */

#ifndef __ASSEMBLY__
/**
 * struct clone_args - arguments for the clone3 syscall
 * @flags:        Flags for the new process as listed above.
 *                All flags are valid except for CSIGNAL and
 *                CLONE_DETACHED.
 * @pidfd:        If CLONE_PIDFD is set, a pidfd will be
 *                returned in this argument.
 * @child_tid:    If CLONE_CHILD_SETTID is set, the TID of the
 *                child process will be returned in the child's
 *                memory.
 * @parent_tid:   If CLONE_PARENT_SETTID is set, the TID of
 *                the child process will be returned in the
 *                parent's memory.
 * @exit_signal:  The exit_signal the parent process will be
 *                sent when the child exits.
 * @stack:        Specify the location of the stack for the
 *                child process.
 *                Note, @stack is expected to point to the
 *                lowest address. The stack direction will be
 *                determined by the kernel and set up
 *                appropriately based on @stack_size.
 * @stack_size:   The size of the stack for the child process.
 * @tls:          If CLONE_SETTLS is set, the tls descriptor
 *                is set to tls.
 * @set_tid:      Pointer to an array of type *pid_t. The size
 *                of the array is defined using @set_tid_size.
 *                This array is used to select PIDs/TIDs for
 *                newly created processes. The first element in
 *                this defines the PID in the most nested PID
 *                namespace. Each additional element in the array
 *                defines the PID in the parent PID namespace of
 *                the original PID namespace. If the array has
 *                less entries than the number of currently
 *                nested PID namespaces only the PIDs in the
 *                corresponding namespaces are set.
 * @set_tid_size: This defines the size of the array referenced
 *                in @set_tid. This cannot be larger than the
 *                kernel's limit of nested PID namespaces.
 * @cgroup:       If CLONE_INTO_CGROUP is specified set this to
 *                a file descriptor for the cgroup.
 *
 * The structure is versioned by size and thus extensible.
 * New struct members must go at the end of the struct and
 * must be properly 64bit aligned.
 */
struct clone_args {
	__aligned_u64 flags;
	__aligned_u64 pidfd;
	__aligned_u64 child_tid;
	__aligned_u64 parent_tid;
	__aligned_u64 exit_signal;
	__aligned_u64 stack;
	__aligned_u64 stack_size;
	__aligned_u64 tls;
	__aligned_u64 set_tid;
	__aligned_u64 set_tid_size;
	__aligned_u64 cgroup;
};
#endif

----

[source,c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/sched/task.h
----

struct kernel_clone_args {
	u64 flags;
	int __user *pidfd;
	int __user *child_tid;
	int __user *parent_tid;
	int exit_signal;
	unsigned long stack;
	unsigned long stack_size;
	unsigned long tls;
	pid_t *set_tid;
	/* Number of elements in *set_tid */
	size_t set_tid_size;
	int cgroup;
	int io_thread;
	int kthread;
	int idle;
	int (*fn)(void *);
	void *fn_arg;
	struct cgroup *cgrp;
	struct css_set *cset;
};
----

https://zhuanlan.zhihu.com/p/373954153
https://zhuanlan.zhihu.com/p/373958196

==== 0号进程
也称idle进程, 或swapper进程(历史原因), 唯一一个没有通过fork创建的进程
创建1号进程和2号进程
pstree -ap 0
https://elixir.bootlin.com/linux/latest/source/include/linux/init_task.h

==== 1号进程
也叫init进程
1号进程是所有用户态进程的祖先
pstree -ap 1
systemd https://man7.org/linux/man-pages/man1/systemd.1.html

==== 2号进程
2号进程是所有内核线程的祖先
内核线程: ps -aux 名称带[]的
pstree -ap 2
kthreadd

kthreadd的创建:

    start_kernel()  https://elixir.bootlin.com/linux/latest/source/init/main.c
        arch_call_rest_init()
            rest_init()
                pid = kernel_thread(kthreadd, NULL, CLONE_FS | CLONE_FILES);

==== 主流程

==== v0.12
fork

    fork()  https://elixir.bootlin.com/linux/0.12/source/include/unistd.h
        sys_fork()  https://elixir.bootlin.com/linux/0.12/source/kernel/sys_call.s
            copy_process()  https://elixir.bootlin.com/linux/0.12/source/kernel/fork.c

=== 启动新程序
https://elixir.bootlin.com/linux/latest/source/fs/exec.c

    do_execve
        do_execveat_common
            bprm_execve
                exec_binprm
                    search_binary_handler
                        load_binary

=== 退出
https://elixir.bootlin.com/linux/latest/source/kernel/exit.c

SYSCALL_DEFINE1(exit, int, error_code):
    do_exit()

SYSCALL_DEFINE4(wait4, pid_t, upid, int __user *, stat_addr, int, options, struct rusage __user *, ru):
    kernel_wait4()

=== 内核线程
==== 概念
内核线程是内核启动的进程，实际上就是将内核函数委托给独立的进程。
内核线程在ps命令的输出中由中括号包围，以与普通进程区分。
如果内核线程绑定到特定的CPU，CPU的编号会在斜线后给出。

==== 结构
struct kthread:  https://elixir.bootlin.com/linux/latest/source/kernel/kthread.c

==== 操作
copy_thread():  https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/process.c
    
    PF_KTHREAD

除了初始化阶段0号内核线程和kthreadd，其它所有内核线程都是由kthreadd内核线程来创建的

    int kthreadd(void *unused)  https://elixir.bootlin.com/linux/latest/source/kernel/kthread.c
        create_kthread()  https://elixir.bootlin.com/linux/latest/source/kernel/kthread.c
            kernel_thread()  https://elixir.bootlin.com/linux/latest/source/kernel/fork.c
                kernel_clone()  https://elixir.bootlin.com/linux/latest/source/kernel/fork.c

kthread_run():  https://elixir.bootlin.com/linux/latest/source/include/linux/kthread.h

		kthread_create()
		wake_up_process()

kthread_stop():  https://elixir.bootlin.com/linux/latest/source/kernel/kthread.c

==== 内核线程虚拟地址转换
https://zhuanlan.zhihu.com/p/373959024
https://mp.weixin.qq.com/s/pmWuGS6thCj6GNwwjh0bRw

==== 示例
- kswapd
kswapd_run()  https://elixir.bootlin.com/linux/latest/source/mm/vmscan.c

- ksoftirqd
https://elixir.bootlin.com/linux/latest/source/kernel/softirq.c

static struct smp_hotplug_thread softirq_threads = {
        .store                  = &ksoftirqd,
        .thread_should_run      = ksoftirqd_should_run,
        .thread_fn              = run_ksoftirqd,
        .thread_comm            = "ksoftirqd/%u",
};  

=== 命名空间
https://elixir.bootlin.com/linux/latest/source/include/linux/nsproxy.h

=== 进程ID
https://elixir.bootlin.com/linux/latest/source/include/linux/pid.h

enum pid_type
{
	PIDTYPE_PID,  //进程ID
	PIDTYPE_TGID, //线程组ID
	PIDTYPE_PGID, //进程组ID
	PIDTYPE_SID,  //会话ID
	PIDTYPE_MAX,
};

struct upid
struct pid

进程的PID和TGID位于task_struct,
PGID和SID则位于task_struct->signal:
struct signal_struct {
    ...
	/* PID/PID hash table linkage. */
	struct pid *pids[PIDTYPE_MAX];
    ...
}

全局ID:

    struct task_struct {
        ...
        pid_t   pid;
        pid_t   tgid;
        ...
    }

局部ID:

    属于某个特定的命名空间，不具备全局有效性

struct pid_namespace:  https://elixir.bootlin.com/linux/latest/source/include/linux/pid_namespace.h

创建与销毁:
alloc_pid()
    调用时机: copy_process()
free_pid()
    调用时机: __change_pid()