:toc:
:toclevels: 5
:hardbreaks-option:

== 概念
▪ 进程与线程

    linux线程又叫轻进程(LWP)，传统unix进程称为重进程
    线程和进程都使用task_struct结构体来描述: 历史原因+单线程的进程经济一些
    同进程下的线程共享一个地址空间

▪ 内核态(kernel mode)与用户态(user mode)

    内核态用户态指的是CPU在执行指令时所位于的特权层级
    内核态和用户态是两种不同的 CPU 执行权限级别，用于隔离操作系统内核与用户程序，确保系统的安全性和稳定性

    特性              用户态(User Mode)                   内核态(Kernel Mode)
    权限级别      低权限(X86: Ring 3, ARM: EL0)      高权限(X86: Ring 0, ARM: EL1)
    访问资源	   受限(只能访问自己的内存空间)	        无限制(可访问所有硬件和内存)
    执行代码     用户程序(如应用程序、Shell 脚本)	操作系统内核(如驱动、进程调度、内存管理)
    崩溃影响           仅影响当前进程                   可能导致系统崩溃(如内核 Panic)

▪ 内核线程

    内核线程是内核启动的进程，实际上就是将内核函数委托给独立的进程
    内核线程在ps命令的输出中由中括号包围，以与普通进程区分
    内核线程如果绑定到特定的CPU，CPU的编号会在斜线后给出

▪ 0号进程

    也称idle进程, 或swapper进程(历史原因)
    是唯一一个没有通过fork创建的进程
    创建1号进程和2号进程
    pstree -ap 0
    注意: ps命令看不到进程id为0的进程(同理ls /proc也看不到):
        这是因为在使用ps命令的时候，0号进程已经演变成idle进程了
    https://stackoverflow.com/questions/8493809/why-cant-i-see-process-with-pid-0-using-ps


    https://elixir.bootlin.com/linux/latest/source/kernel/sched/core.c
        void __init sched_init(void)
            init_idle(current, smp_processor_id());

▪ 1号进程

    也叫init进程
    1号进程是所有用户态进程的祖先
    pstree -ap 1
    systemd:
            https://man7.org/linux/man-pages/man1/systemd.1.html
            https://systemd.io/
            https://lwn.net/Articles/1008721/

▪ 2号进程

    2号进程是所有内核线程的祖先
    pstree -ap 2
    kthreadd

▪ 进程组与会话组

    进程组是Linux中一组相关进程的集合，它们通常由同一个shell作业(job)启动
    会话组是比进程组更高一级的进程集合，通常代表一个用户登录会话
    会话包含多个进程组，进程组包含多个进程
    任何一个进程，一定属于某个进程组，而且只能属于一个进程组
    任何一个进程，一定属于某个会话组，而且只能属于一个会话组
    任何一个进程组，其所有进程必须都属于同一个会话组
    进程是不能转会话组的: 一个进程所属的会话组只有两种来源，或继承而来，或由自己创建
    进程是可以转进程组的，但是只能在同一个会话组中的进程组之间转
