:toc:
:toclevels: 5
:hardbreaks-option:

== 锁

=== 并发
内核中可能造成并发执行的原因:

    中断
    内核抢占
    睡眠及调度
    多处理器

=== 原子操作

=== 自旋锁
Q: 什么情况下使用

Q: 为什么要关闭中断?
A: https://stackoverflow.com/questions/37146637/why-is-interrupt-disabled-between-spin-lock-and-spin-unlock-in-linux

Q: 为什么要关闭抢占？

Q: 为什么自旋锁保护的代码不能进入睡眠状态？

spin_lock/spin_unlock — 禁止内核抢占
spin_lock_irq/spin_unlock_irq — 禁止内核抢占并屏蔽中断
spin_lock_irqsave/spin_unlock_irqrestore — 禁止内核抢占并屏蔽中断，事先保存中断屏蔽位并事后恢复原状

==== raw spinlock

==== ticket spinlock
https://en.wikipedia.org/wiki/Ticket_lock
主要解决公平性

==== mcs spinlock
per-CPU structure, 在cache-line上效率更高
https://lwn.net/Articles/590243/

==== queue spinlock
基于mcs spinlock的思想但解决了mcs spinlock占用空间大的问题
https://lwn.net/Articles/561775/
https://0xax.gitbooks.io/linux-insides/content/SyncPrim/linux-sync-2.html

=== 信号量

[source,c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/semaphore.h
----

/* Please don't access any members of this structure directly */
struct semaphore {
	raw_spinlock_t		lock;
	unsigned int		count;
	struct list_head	wait_list;
};

//...

extern void down(struct semaphore *sem);
extern int __must_check down_interruptible(struct semaphore *sem);
extern int __must_check down_killable(struct semaphore *sem);
extern int __must_check down_trylock(struct semaphore *sem);
extern int __must_check down_timeout(struct semaphore *sem, long jiffies);
extern void up(struct semaphore *sem);
----

down(), up(): https://elixir.bootlin.com/linux/latest/source/kernel/locking/semaphore.c

=== Seqlock顺序锁
v2.6引入, 对写友好, 写总能成功
https://elixir.bootlin.com/linux/latest/source/include/linux/seqlock.h
sequence number的初始值是一个偶数
writer持有spinlock时，sequence number的值将是一个奇数(sequence number+1), 释放后则又变成偶数(sequence number+1)
reader在读取一个共享变量之前, 需要先读取一下sequence number的值，如果为奇数，说明有writer正在修改这个变量, 需要等待, 直到sequence number变为偶数，才可以开始读取变量
reader可以随时读, 但可能需要多读几次
writer只会被其他writer造成饥饿，不再被reader造成饥饿

=== RCU
主要适用于下面的场景:

    ▪ RCU只能保护动态分配的数据结构, 并且必须是通过指针访问该数据结构
    ▪ 受RCU保护的临界区内不能sleep(SRCU?)
    ▪ 读写不对称，对writer的性能没有特别要求, 但是reader性能要求极高
    ▪ reader对新旧数据不敏感

https://www.kernel.org/doc/html/latest/RCU/index.html
https://hackmd.io/@sysprog/linux-rcu?type=view

=== 内存屏障
https://elixir.bootlin.com/linux/latest/source/include/asm-generic/barrier.h
https://elixir.bootlin.com/linux/latest/source/arch/x86/include/asm/barrier.h
https://elixir.bootlin.com/linux/latest/source/arch/arm/include/asm/barrier.h

=== 读写锁
也叫读写自旋锁
写饥饿问题
现在的内核开发已经不建议再使用rwlock了, 之前使用到的rwlock也在逐渐被移除或者替换为普通的spinlock或者RCU

=== 大内核锁
BKL锁已经被淘汰(v2.6.39)
https://en.wikipedia.org/wiki/Giant_lock

=== 互斥量
可以看作是0-1信号量

=== per-cpu变量
https://elixir.bootlin.com/linux/latest/source/arch/x86/include/asm/percpu.h