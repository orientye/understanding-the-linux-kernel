:toc:
:toclevels: 5
:hardbreaks-option:

== 总线

=== 概念
- 定义
一组能为多个部件分时共享的公共信息传输线路，以更好地解决I/O设备与主机间连接的灵活性问题。

- 特性
机械特性: 尺寸、形状、管脚数、排列顺序
电气特性: 传输方向和有效的电平范围
功能特性: 根传输线的功能(地址、数据、控制)
时间特性: 信号的时序关系

- 分类
按数据传输格式分: 串行总线和并行总线
按总线连接的部件分: 片内总线 系统总线 通信总线
按时序控制方式分: 同步总线和异步总线

- 结构
1.单总线结构
2.双总线结构
一条是主存总线，用于CPU、主存和通道之间进行数据传送；另一条是IO总线，用于多个外部设备与通道之间进行数据传送。
3.三总线结构
主存总线、IO总线和直接内存访问DMA总线。
4.四总线结构
桥接器: 用于连接不同的总线，具有数据缓冲、转换和控制功能；靠近CPU的总线速度较快；每级总线的设计遵循总线标准。

- PCIe
PCI Express，简称PCI-E或PCIe
PCI即Peripheral Component Interconnect，外围器件互联，是由PCISIG(PCI Special Interest Group)推出的一种局部并行总线标准。
PCI总线已经逐渐被PCI Express总线所取代。
https://zh.wikipedia.org/wiki/PCI_Express
vs. SCSI: https://stackoverflow.com/questions/17339640/difference-between-scsi-and-pci

- 参考
https://zh.wikipedia.org/wiki/%E6%80%BB%E7%BA%BF
https://zhuanlan.zhihu.com/p/259209719

=== PCI系统

==== 命令
lspci -vvv

==== struct pci_bus
PCI总线
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/pci.h
----
struct pci_bus {
	struct list_head node;		/* Node in list of buses */
	struct pci_bus	*parent;	/* Parent bus this bridge is on */
	struct list_head children;	/* List of child buses */
	struct list_head devices;	/* List of devices on this bus */
	struct pci_dev	*self;		/* Bridge device as seen by parent */
	struct list_head slots;		/* List of slots on this bus;
					   protected by pci_slot_mutex */
	struct resource *resource[PCI_BRIDGE_RESOURCE_NUM];
	struct list_head resources;	/* Address space routed to this bus */
	struct resource busn_res;	/* Bus numbers routed to this bus */

	struct pci_ops	*ops;		/* Configuration access functions */
	void		*sysdata;	/* Hook for sys-specific extension */
	struct proc_dir_entry *procdir;	/* Directory entry in /proc/bus/pci */

	unsigned char	number;		/* Bus number */
	unsigned char	primary;	/* Number of primary bridge */
	unsigned char	max_bus_speed;	/* enum pci_bus_speed */
	unsigned char	cur_bus_speed;	/* enum pci_bus_speed */
#ifdef CONFIG_PCI_DOMAINS_GENERIC
	int		domain_nr;
#endif

	char		name[48];

	unsigned short	bridge_ctl;	/* Manage NO_ISA/FBB/et al behaviors */
	pci_bus_flags_t bus_flags;	/* Inherited by child buses */
	struct device		*bridge;
	struct device		dev;
	struct bin_attribute	*legacy_io;	/* Legacy I/O for this bus */
	struct bin_attribute	*legacy_mem;	/* Legacy mem */
	unsigned int		is_added:1;
	unsigned int		unsafe_warn:1;	/* warned about RW1C config write */
};
----

==== struct pci_dev
https://elixir.bootlin.com/linux/latest/source/include/linux/pci.h

==== struct pci_device_id
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/mod_devicetable.h
----
struct pci_device_id {
	__u32 vendor, device;		/* Vendor and device ID or PCI_ANY_ID*/
	__u32 subvendor, subdevice;	/* Subsystem ID's or PCI_ANY_ID */
	__u32 class, class_mask;	/* (class,subclass,prog-if) triplet */
	kernel_ulong_t driver_data;	/* Data private to the driver */
	__u32 override_only;
};
----

==== struct pci_driver
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/pci.h
----
/**
 * struct pci_driver - PCI driver structure
 * @node:	List of driver structures.
 * @name:	Driver name.
 * @id_table:	Pointer to table of device IDs the driver is
 *		interested in.  Most drivers should export this
 *		table using MODULE_DEVICE_TABLE(pci,...).
 * @probe:	This probing function gets called (during execution
 *		of pci_register_driver() for already existing
 *		devices or later if a new device gets inserted) for
 *		all PCI devices which match the ID table and are not
 *		"owned" by the other drivers yet. This function gets
 *		passed a "struct pci_dev \*" for each device whose
 *		entry in the ID table matches the device. The probe
 *		function returns zero when the driver chooses to
 *		take "ownership" of the device or an error code
 *		(negative number) otherwise.
 *		The probe function always gets called from process
 *		context, so it can sleep.
 * @remove:	The remove() function gets called whenever a device
 *		being handled by this driver is removed (either during
 *		deregistration of the driver or when it's manually
 *		pulled out of a hot-pluggable slot).
 *		The remove function always gets called from process
 *		context, so it can sleep.
 * @suspend:	Put device into low power state.
 * @resume:	Wake device from low power state.
 *		(Please see Documentation/power/pci.rst for descriptions
 *		of PCI Power Management and the related functions.)
 * @shutdown:	Hook into reboot_notifier_list (kernel/sys.c).
 *		Intended to stop any idling DMA operations.
 *		Useful for enabling wake-on-lan (NIC) or changing
 *		the power state of a device before reboot.
 *		e.g. drivers/net/e100.c.
 * @sriov_configure: Optional driver callback to allow configuration of
 *		number of VFs to enable via sysfs "sriov_numvfs" file.
 * @sriov_set_msix_vec_count: PF Driver callback to change number of MSI-X
 *              vectors on a VF. Triggered via sysfs "sriov_vf_msix_count".
 *              This will change MSI-X Table Size in the VF Message Control
 *              registers.
 * @sriov_get_vf_total_msix: PF driver callback to get the total number of
 *              MSI-X vectors available for distribution to the VFs.
 * @err_handler: See Documentation/PCI/pci-error-recovery.rst
 * @groups:	Sysfs attribute groups.
 * @dev_groups: Attributes attached to the device that will be
 *              created once it is bound to the driver.
 * @driver:	Driver model structure.
 * @dynids:	List of dynamically added device IDs.
 * @driver_managed_dma: Device driver doesn't use kernel DMA API for DMA.
 *		For most device drivers, no need to care about this flag
 *		as long as all DMAs are handled through the kernel DMA API.
 *		For some special ones, for example VFIO drivers, they know
 *		how to manage the DMA themselves and set this flag so that
 *		the IOMMU layer will allow them to setup and manage their
 *		own I/O address space.
 */
struct pci_driver {
	struct list_head	node;
	const char		*name;
	const struct pci_device_id *id_table;	/* Must be non-NULL for probe to be called */
	int  (*probe)(struct pci_dev *dev, const struct pci_device_id *id);	/* New device inserted */
	void (*remove)(struct pci_dev *dev);	/* Device removed (NULL if not a hot-plug capable driver) */
	int  (*suspend)(struct pci_dev *dev, pm_message_t state);	/* Device suspended */
	int  (*resume)(struct pci_dev *dev);	/* Device woken up */
	void (*shutdown)(struct pci_dev *dev);
	int  (*sriov_configure)(struct pci_dev *dev, int num_vfs); /* On PF */
	int  (*sriov_set_msix_vec_count)(struct pci_dev *vf, int msix_vec_count); /* On PF */
	u32  (*sriov_get_vf_total_msix)(struct pci_dev *pf);
	const struct pci_error_handlers *err_handler;
	const struct attribute_group **groups;
	const struct attribute_group **dev_groups;
	struct device_driver	driver;
	struct pci_dynids	dynids;
	bool driver_managed_dma;
};
----

==== 注册
pcibus_class_init(): https://elixir.bootlin.com/linux/latest/source/drivers/pci/probe.c

pci_driver_init(): https://elixir.bootlin.com/linux/latest/source/drivers/pci/pci-driver.c

以e1000网卡驱动的注册为例:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/drivers/net/ethernet/intel/e1000/e1000_main.c
----
static struct pci_driver e1000_driver = {
	.name     = e1000_driver_name,
	.id_table = e1000_pci_tbl,
	.probe    = e1000_probe,
	.remove   = e1000_remove,
	.driver = {
		.pm = &e1000_pm_ops,
	},
	.shutdown = e1000_shutdown,
	.err_handler = &e1000_err_handler
};
//...
module_init(e1000_init_module);
module_exit(e1000_exit_module);
----

=== SCSI系统

==== struct scsi_host_template
SCSI主机适配器模板
https://elixir.bootlin.com/linux/latest/source/include/scsi/scsi_host.h

==== struct Scsi_Host
SCSI主机适配器
https://elixir.bootlin.com/linux/latest/source/include/scsi/scsi_host.h

scsi_host_alloc - register a scsi host adapter instance:
struct Scsi_Host *scsi_host_alloc(const struct scsi_host_template *sht, int privsize):
https://elixir.bootlin.com/linux/latest/source/drivers/scsi/hosts.c

==== struct scsi_target
representation of a scsi target, for now, this is only used for single_lun devices. If no one has active IO to the target, starget_sdev_user is NULL, else it points to the active sdev.
https://elixir.bootlin.com/linux/latest/source/include/scsi/scsi_device.h

==== struct scsi_device
https://elixir.bootlin.com/linux/latest/source/include/scsi/scsi_device.h

==== struct scsi_cmnd
SCSI命令
两种含义:
一种是指SCSI规范定义的SCSI命令，即表示为字节串的命令描述块(Command Descriptor Block, CDB)
另一种指的是scsi_cmnd描述符，发源于SCSI中间层，传递到SCSI低层驱动。
https://elixir.bootlin.com/linux/latest/source/include/scsi/scsi_cmnd.h

==== 初始化
init_scsi(): https://elixir.bootlin.com/linux/latest/source/drivers/scsi/scsi.c

==== 设备探测
void scsi_scan_host(struct Scsi_Host *shost): https://elixir.bootlin.com/linux/latest/source/drivers/scsi/scsi_scan.c

scsi_add_lun(): allocate and fully initialze a scsi_device
https://elixir.bootlin.com/linux/latest/source/drivers/scsi/scsi_scan.c