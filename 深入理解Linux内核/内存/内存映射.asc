:toc:
:toclevels: 5
:hardbreaks-option:

== 内存映射
=== 作用与原理
Linux initializes the contents of a virtual memory area by associating it with an object on disk, a process known as memory mapping. 

Areas can be mapped to one of two types of objects:

1. Regular file in the Linux file system: An area can be mapped to a contiguous section of a regular disk file, such as an executable object file. The file section is divided into page-size pieces, with each piece containing the initial contents of a virtual page. Because of demand paging, none of these virtual pages is actually swapped into physical memory until the CPU first touches the page (i.e., issues a virtual address that falls within that page’s region of the address space). If the area is larger than the file section, then the area is padded with zeros. 适合于很大的文件

2. Anonymous file: An area can also be mapped to an anonymous file, created by the kernel, that contains all binary zeros. The first time the CPU touches a virtual page in such an area, the kernel finds an appropriate victim page in physical memory, swaps out the victim page if it is dirty, overwrites the victim page with binary zeros, and updates the page table to mark the page as resident. Notice that no data are actually transferred between disk and memory. For this reason, pages in areas that are mapped to anonymous files are sometimes called demand-zero pages. 适合于创建进程间通信的共享内存。

In either case, once a virtual page is initialized, it is swapped back and forthbetween a special swap file maintained by the kernel. The swap file is also known as the swap space or the swap area. An important point to realize is that at any point in time, the swap space bounds the total amount of virtual pages that can be allocated by the currently running processes.

内存映射是一种重要的抽象，在内核和应用程序中均大量使用。内存映射将数据映射到进程的虚拟地址空间中。作为映射目标的地址空间区域，对改区域的内存修改都会自动同步到数据源。例如，文件的内容映射到内存中，处理只需要读取相应的内存即可访问文件内容，或向内存写入数据来修改文件的内容，内核保证任何修改都会自动同步到文件中。内核在实现设备驱动程序时直接使用了内存映射，外设的输入/输出可以映射到虚拟地址空间的区域中，对相关内存区域的都写会由系统重定向到设备，因而大大简化了驱动程序的实现。

▪ 问题
内存映射文件需要在进程上占用一块很大的连续地址空间。对于Intel的IA-32的4G逻辑地址空间，可用的连续地址空间远远小于2-3G。
相关联的文件的I/O错误(如可拔出驱动器或光驱被弹出，磁盘满时写操作等)的内存映射文件会向应用程序报告SIGSEGV/SIGBUS信号(POSIX环境)或EXECUTE_IN_PAGE_ERROR结构化异常(Windows环境)。通常的内存操作是无需考虑这些异常的。
有内存管理单元(MMU)才支持内存映射文件。

参考: CSAPP 3rd, 9.8
参考: https://linux-kernel-labs.github.io/refs/heads/master/labs/memory_mapping.html

=== 用户空间映射

==== 概念
▪ 文件/匿名 
匿名映射：没有映射对应的相关文件。
文件映射：映射和实际文件相关联，通常是把文件的内容映射到进程地址空间，应用程序可以像操作进程地址空间一样读写文件。

▪ 私有/共享
私有映射：映射的内容对其它进程不可见。
共享映射：共享的内存区域操作对其他进程可见。

(1)私有文件映射: 多个进程使用同样的物理页面进行初始化，但是各个进程对内存文件的修改不会共享，也不会反映到物理文件中。例如.so动态库文件就采用这种方式映射到各个进程虚拟地址空间中。
(2)共享文件映射: 多个进程通过虚拟内存技术共享同样物理内存，对内存文件的修改会反应到实际物理内存中，也是进程间通信的一种。
(3)私有匿名映射: mmap会创建一个新的映射，各个进程不共享，主要用于malloc分配大(>MMAP THRESHOLD)内存。
(4)共享匿名映射: 共享匿名映射让相关进程共享一块内存区域，常用于父子进程之间的通信。

==== mmap()/munmap()
#include <sys/mman.h>

void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
int munmap(void *addr, size_t length);

参考: https://man7.org/linux/man-pages/man2/mmap.2.html

==== remap_pfn_range()
外设物理地址映射到用户空间。

=== 内核空间映射
==== 持久内核映射
kmap(): https://elixir.bootlin.com/linux/latest/source/include/linux/highmem-internal.h
kmap函数不能用于中断处理程序, 因为它可能进入睡眠状态

==== 固定内存映射/临时内核映射
kmap_atomic(): https://elixir.bootlin.com/linux/latest/source/include/linux/highmem-internal.h
kmap_atomic函数不能用于可能进入睡眠的代码

==== 外部设备存储空间的地址映射
一般来说，对外部设备的访问有两种不同的形式，一种叫做内存映射式(memory mapped), 另一种叫做IO映射式(I/O mapped)。

对于内存映射式，外部设备的存储单元例如控制寄存器，状态寄存器，数据寄存器等，是作为内存的一部分出现在系统中的。CPU可以像访问一个内存单元一样访问外部设备的内存单元，因此不需要专门用于外设I/O的指令。

对于IO映射式，外部设备的存储单元与内存属于两个不同的体系，访问内存的指令不能用于访问外部设备的存储单元，例如X86的IN和OUT指令，但通常用于IO指令的地址空间相对来说是很小的。可以说，IO映射式只适合与早期的计算机技术，彼时外设通常只有几个寄存器，通过这几个寄存器就能完成对外设的所有操作。随着计算机技术的发展，单纯的IO映射方式显然已经不能满足需求了。

尤其随着显卡以及PCI总线的出现，不管是采用IO映射还是内存映射，都需要将外设上的存储器映射到内存空间。
在内核中，通过ioremap()/iounmap()来建立/解除映射。

ioremap(): https://elixir.bootlin.com/linux/latest/source/arch/x86/mm/ioremap.c
iounmap(): https://elixir.bootlin.com/linux/latest/source/arch/x86/mm/ioremap.c

==== 反向映射/逆向映射

===== 概念
正向映射:
将进程虚拟地址空间中的虚拟页面映射到对应的物理页面/页帧(page frame)。

逆向映射:
在已知page frame的情况下(可能是PFN、可能是指向page descriptor的指针，也可能是物理地址，内核有各种宏定义用于在它们之间进行转换)，找到映射到该物理页面的虚拟页面们。
由于一个page frame可以在多个进程之间共享，逆向映射可以将分散在各个进程地址空间中的所有的page table entry全部找出来。

通常一个进程的地址空间内不会把多个虚拟地址mapping到一个page frame上，除非这个page被多个进程共享。最简单的例子就是采用COW的进程fork，在进程没有写的动作之前，内核是不会分配新的page frame的，因此父子进程共享一个物理页面。还有一个例子和c lib相关，由于c lib是基础库，它会file mapping到很多进程地址空间中，那么c lib中的程序正文段对应的page frame应该会有非常多的page table entries与之对应。

简单来说，逆向映射就是给定物理页面，查找其对应的所有进程的VMA对应的页表项，即：如何确定该物理内存有哪些进程正在使用，又或者说如何通过物理页查找虚拟页。

反向映射可以分为：匿名页(anon)反向映射、文件页(file)反向映射、KSM页面(ksm)反向映射。

===== 应用场景
页面回收
页面迁移
脏页标记
访问跟踪

===== 实现
https://elixir.bootlin.com/linux/latest/source/include/linux/rmap.h
https://elixir.bootlin.com/linux/latest/source/mm/rmap.c

- 匿名页反向映射

- 文件页反向映射

- KSM页面反向映射

==== 参考
https://blog.csdn.net/u010923083/article/details/116456497
https://lwn.net/Articles/23732/
http://www.wowotech.net/memory_management/reverse_mapping.html
https://cloud.tencent.com/developer/article/1942106?areaSource=104001.11&traceId=O_Wi5mF8tgN5gnL7qVLJo
