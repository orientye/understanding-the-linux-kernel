:toc:
:toclevels: 5
:hardbreaks-option:

== 物理内存

mem_map

=== 伙伴系统
▪ 数据结构
https://elixir.bootlin.com/linux/latest/source/include/linux/mmzone.h

[source,c]
----
    struct free_area {
        struct list_head	free_list[MIGRATE_TYPES];
        unsigned long		nr_free;
    };

    struct zone {
        ......
        /* free areas of different sizes */
        struct free_area	free_area[MAX_ORDER];//MAX_ORDER一般为11
        ......
    }
----

free_area[]数组下标也称为阶，对应链表中的连续内存区包含多少个页帧。
例如第0个链表包含的内存区为单页(2°=1), 第1个链表管理的内存区为2页, 第3个管理的内存区为4页,依次类推。

▪ 系统命令: cat /proc/buddyinfo

=== slab
▪ 系统命令: cat /proc/slabinfo

==== slab
https://elixir.bootlin.com/linux/latest/source/include/linux/slab.h
https://elixir.bootlin.com/linux/latest/source/mm/slab.c
struct kmem_cache
kmalloc函数
kfree函数

==== slob
https://elixir.bootlin.com/linux/latest/source/mm/slob.c

==== slub
https://elixir.bootlin.com/linux/latest/source/mm/slub.c

=== 碎片避免
可移动页

https://elixir.bootlin.com/linux/latest/source/mm/page_alloc.c

[source,c]
----
/*
 * This array describes the order lists are fallen back to when
 * the free lists for the desirable migrate type are depleted
 */
static int fallbacks[MIGRATE_TYPES][3] = {
	[MIGRATE_UNMOVABLE]   = { MIGRATE_RECLAIMABLE, MIGRATE_MOVABLE,   MIGRATE_TYPES },
	[MIGRATE_MOVABLE]     = { MIGRATE_RECLAIMABLE, MIGRATE_UNMOVABLE, MIGRATE_TYPES },
	[MIGRATE_RECLAIMABLE] = { MIGRATE_UNMOVABLE,   MIGRATE_MOVABLE,   MIGRATE_TYPES },
#ifdef CONFIG_CMA
	[MIGRATE_CMA]         = { MIGRATE_TYPES }, /* Never used */
#endif
#ifdef CONFIG_MEMORY_ISOLATION
	[MIGRATE_ISOLATE]     = { MIGRATE_TYPES }, /* Never used */
#endif
};
----

void set_pageblock_migratetype(struct page *page, int migratetype)
初始化的时候都是MIGRATE_MOVABLE

=== CPU高速缓存

=== TLB

=== v0.12
v0.12默认最多支持16M物理内存
16M物理内存划分:
内核区: 0-end
高速缓冲区: 3段 end-640K | 640K-1M(显示内存与BIOS ROM) | 1M-4M
虚拟盘: 4M-4.5M
主内存区: 4.5M -16M