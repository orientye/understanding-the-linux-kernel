:toc:
:toclevels: 5
:hardbreaks-option:

== 内存分配与释放

=== 演进
==== 伙伴分配器
https://www.kernel.org/doc/gorman/html/understand/understand009.html

==== 对象分配器
===== SLAB
2.0
slab可以看作是内存对象池
https://en.wikipedia.org/wiki/Slab_allocation

===== SLOB(Simple List Of Blocks)
2.6.16
比较精简，适用于嵌入式小内存机器

===== SLUB
2.6.22
新一代，default
https://events.static.linuxfound.org/images/stories/pdf/klf2012_kim.pdf
https://lwn.net/Articles/229984/
https://stackoverflow.com/questions/15470560/what-to-choose-between-slab-and-slub-allocator-in-linux-kernel

==== 连续内存分配器(CMA)
since 3.5
Contiguous Memory Allocator
避免预留大块内存
https://lwn.net/Articles/447405/
https://lwn.net/Articles/486301/
https://blog.51cto.com/u_15015138/2556751

==== 碎片问题
▪ 成块回收(Lumpy Reclaim)
2.6.23, 3.5移除(2012年7月)
回收是指MM在分配内存遇到内存紧张时, 会把一部分内存页面回收。
成块回收是尝回收目标回收页相邻的页面，以形成一块满足需求的高阶连续页块。
这种方法没有考虑被连带回收的页面可能是比较热的页面。

▪ Page Clustering by Page Mobility
2.6.23
所有使用的内存页有三种情形：
1.容易回收的(easily reclaimable): 这种页面可以在系统需要时回收，比如文件缓存页，们可以轻易的丢弃掉而不会有问题(有需要时再从后备文件系统中读取); 又比如一些生命周期短的内核使用的页，如DMA缓存区。
2.难回收的(non-reclaimable): 这种页面得内核主动释放，很难回收，内核使用的很多内存页就归为此类，比如为模块分配的区域，比如一些常驻内存的重要内核结构所占的页面。
3. 可移动的(movable): 用户空间分配的页面都属于这种类型，因为用户态的页地址是由页表翻译的，移动页后只要修改页表映射就可以(这也从另一面应证了内核态的页为什么不能移动，因为它们采取直接映射)。

因此, Mel Gorman修改了伙伴分配器和分配 API, 使得在分配时告知伙伴分配器页面的可移动性: 回收时, 把相同移动性的页面聚类; 分配时, 根据移动性, 从相应的聚类中分配. 聚类的好处是, 结合上述的成块回收方案, 回收页面时，就能保证回收同一类型的; 或者在迁移页面时(migrate page), 就能移动可移动类型的页面，从而腾出连续的页面块，以满足高阶的连续物理页面分配。

▪ 内存紧致化(Memory Compaction)
2.6.35
不同于成块回收回收相临页面, 内存紧致化则是更彻底, 它在回收页面时被触发, 它会在一个zone里扫描, 把已分配的页记录下来,  然后把所有这些页移动到zone的一端, 这样这把一个可能已经七零八落的zone给紧致化成一段完全未分配的区间和一段已经分配的区间, 这样就又腾出大块连续的物理页面了. 它替代了成块回收, 使得成块回收在3.5中被移除。

https://www.zhihu.com/question/35484429/answer/62964898

==== OOM
支持比较早，待考证
/var/log/messages
https://www.cnblogs.com/MrLiuZF/p/15229868.html
https://www.kernel.org/doc/gorman/html/understand/understand016.html
https://blog.csdn.net/reliveIT/article/details/108432119

=== 用户空间
==== 堆栈
alloca

===== 用户堆栈扩展
堆栈的扩展一般不是用户显示发起的，而是入栈过程中动态扩展的。
堆栈区VMA默认是VM_GROWSDOWN向下扩展的。

进程在运行的过程中，通过不断向栈区压入数据，当超出栈区容量时，会触发缺页异常(page fault)。通过异常陷入内核态后，页面异常do_user_addr_fault()异常会调用expand_stack()，进而调用acct_stack_growth()来检查是否还有合适的地方用于栈的增长。

如果栈的大小低于RLIMIT_STACK(通常为8MB，可以通过ulimit -a查看)，那么一般情况下栈会被加长，程序继续执行，感觉不到发生了什么事情，这是一种将栈扩展到所需大小的常规机制。
否则，就会发生栈溢出(stack overflow)，进程将会收到内核发出的段错误(segmentation fault)信号。

动态栈增长是唯一一种访问未映射内存区域而被允许的情形，其他任何对未映射内存区域的访问都会触发页错误，从而导致段错误。一些被映射的区域是只读的，企图写这些区域也会导致段错误。

实现:
expand_stack(): https://elixir.bootlin.com/linux/latest/source/mm/mmap.c

https://blog.csdn.net/yangkuanqaz85988/article/details/52403726

==== 堆
===== malloc/calloc/realloc/free

===== brk
link:./相关系统调用.asc#brk[系统调用brk]

    int brk(void *addr);
    void *sbrk(intptr_t increment);

===== mmap/munmap
link:./相关系统调用.asc#mmap/munmap[系统调用mmap/munmap]

=== 内核空间
==== buddy
link:./物理内存.asc#buddy[伙伴系统]

==== slab
link:./物理内存.asc#slab[slab]

==== vmalloc/vfree
link:./虚拟内存.asc#vmallocvfree[vmalloc/vfree]

==== 内核栈

==== 内核空间映射
link:./虚拟内存.asc#内核空间映射[内核空间映射]

=== 小结
分配函数	区域	    连续性	        大小	    释放函数	  优势
kmalloc	内核空间	物理地址连续	最大值128K-16	kfree	   性能更佳
vmalloc	内核空间	虚拟地址连续	更大	        vfree	   更易分配大内存
malloc	用户空间	虚拟地址连续	更大	        free

=== 参考
https://www.cnblogs.com/arnoldlu/p/8251333.html
https://mp.weixin.qq.com/s/0Ss_A1aeoca2n-KENOL0mA