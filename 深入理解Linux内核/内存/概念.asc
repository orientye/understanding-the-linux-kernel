:toc:
:toclevels: 5
:hardbreaks-option:

== 概念
▪ 线性/虚拟/逻辑地址

    可以认为, 线性地址=虚拟地址
    逻辑地址是32位下的selector:offset形式，x86-64已废弃

▪ 物理地址

    放到地址总线上物理上存在着具体的内存单元的地址
    由于线性地址是连续的，内存中可能没有这么大的一块连续空间, 因此CPU采用了分页内存管理机制, 默认每页4KB
    有了分页机制，线性地址必须通过转换才能变成物理地址

▪ 内核/系统空间与用户空间

    内核空间位于虚拟空间的高处, 物理空间的低处
    用户空间位于虚拟空间的低处, 物理空间的高处
    32位系统:
    虚拟地址0xC0000000-0xFFFFFFFF(1G)为内核空间，较低的3G为用户空间;
    内核空间在物理中的内存则从最低地址0开始
    x86-64只用了48bit:
    0x0000000000000000-0x00007FFFFFFFFFFF表示用户空间(128T)
    0xFFFF800000000000-0xFFFFFFFFFFFFFFFF表示内核空间(128T)

▪ 分段

    intel8086-80286
    GDT
        https://en.wikipedia.org/wiki/Global_Descriptor_Table
        arch/x86/kernel/head*.*
        每个CPU一个GDT
        v0.12: include/linux/head.h: struct desc_struct
    LDT
        https://en.wikipedia.org/wiki/Global_Descriptor_Table#Local_Descriptor_Table
    实际上现在X86架构的OS, 只是象征性地初始化GDT, 之后就不再使用分段而是分页了
    ARM不支持分段
    https://www.zhihu.com/question/50796850

▪ 分页

    intel80386起

▪ 页表

    用来将虚拟地址空间映射到物理地址空间的数据结构称为页表
    各体系结构间接层数目可能不同

▪ 页与页帧

    https://stackoverflow.com/questions/42258337/difference-between-virtual-page-and-page-frame 
    
▪ MMU

    https://en.wikipedia.org/wiki/Memory_management_unit
    现代的处理器一般都具有MMU, 有些嵌入式处理器没有MMU, 有些MMU会集成在CPU里

▪ IOMMU

    https://en.wikipedia.org/wiki/Input%E2%80%93output_memory_management_unit
    IOMMU(Input/Output Memory Management Unit)是一个内存管理单元(Memory Management Unit)
    作用是连接DMA-capable I/O总线(Direct Memory Access-capable I/O Bus)和主存(main memory)
    传统的内存管理单元会把CPU访问的虚拟地址转化成实际的物理地址
    IOMMU则是把设备访问的虚拟地址转化成物理地址。为了防止设备错误地访问内存，有些IOMMU还提供了访问内存保护机制
    应用示例: https://en.wikipedia.org/wiki/Input%E2%80%93output_memory_management_unit#Virtualization

▪ TLB

    TLB(translation lookaside buffer)是MMU的重要组成部分
    https://en.wikipedia.org/wiki/Translation_lookaside_buffer

▪ DMA

    DMA(direct memory access)允许某些硬件无需通过CPU而直接访问主存
    https://en.wikipedia.org/wiki/Direct_memory_access

▪ UMA与NUMA

    CONFIG_NUMA
    2.4.0开始提供了对NUMA的支持
