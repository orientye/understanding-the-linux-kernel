:toc:
:toclevels: 5
:hardbreaks-option:

== 初始化

=== 整体流程
https://elixir.bootlin.com/linux/latest/source/init/main.c
▪ 流程:

    start_kernel
        setup_arch(&command_line);
        setup_per_cpu_areas();
        build_all_zonelists(NULL);
        page_alloc_init();
        mm_init();
        kmem_cache_init_late();
        setup_per_cpu_pageset();

=== node初始化
对于UMA，内核将其视为NUMA node0
可以在启动后，使用sudo dmesg | grep NUMA查看相关初始化信息。

▪ 流程:

    setup_arch() https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/setup.c
        initmem_init()
            #ifndef CONFIG_NUMA https://elixir.bootlin.com/linux/latest/source/arch/x86/mm/init_64.c
            否则 x86_numa_init() https://elixir.bootlin.com/linux/latest/source/arch/x86/mm/numa_64.c
                numa_init(): https://elixir.bootlin.com/linux/latest/source/arch/x86/mm/numa.c
                    dummy_numa_init
                        numa_add_memblk
                            numa_add_memblk_to
                    numa_register_memblks
                        alloc_node_data

=== paging初始化
▪ 流程:

    setup_arch() https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/setup.c
        x86_init.paging.pagetable_init()即native_pagetable_init即paging_init
        https://elixir.bootlin.com/linux/latest/source/arch/x86/kernel/x86_init.c
        struct x86_init_ops x86_init __initdata
            .paging = {
                .pagetable_init		= native_pagetable_init,
            },
        #ifdef CONFIG_X86_32
            extern void native_pagetable_init(void);
        #else
            #define native_pagetable_init        paging_init
        #endif
        paging_init()
            sparse_init()
            zone_sizes_init()
                free_area_init()
                    free_area_init_node()
                        free_area_init_core()
