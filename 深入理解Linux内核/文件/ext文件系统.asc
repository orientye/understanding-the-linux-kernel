:toc:
:toclevels: 5
:hardbreaks-option:

== ext文件系统

=== 演进

==== 最早期
最开始直接使用MINIX 1.0文件系统

==== ext
0.96c, 1992
ext使用在内核中的新虚拟文件系统(VFS)抽象层
https://en.wikipedia.org/wiki/Ext2

==== ext2
0.99, 1993
提供了GB级别的最大文件大小和TB级别的文件系统大小

==== ext3
2.4.15 - 4.2
由于ext4完全覆盖了ex3的功能，造成了许多功能的重复，最终ext3在4.3版本里被移除: 
https://kernelnewbies.org/Linux_4.3#The_Ext3_filesystem_has_been_removed
https://lwn.net/Articles/651645/

ext2工作得很好，但像FAT、FAT32等当时的其它文件系统一样，在断电时容易发生灾难性的破坏。
如果在将数据写入文件系统时候发生断电，则可能会将其留在所谓不一致的状态，这可能导致大量文件丢失或损坏，这些文件与正在保存的文件无关甚至导致整个文件系统无法卸载。

ext3和20世纪90年代后期的其它文件系统，如微软的NTFS，使用日志来解决这个问题。日志是磁盘上的一种特殊的分配区域，其写入被存储在事务中；如果该事务完成磁盘写入，则日志中的数据将提交给文件系统自身。如果系统在该操作提交前崩溃，则重新启动的系统识别其为未完成的事务而将其进行回滚，就像从未发生过一样。这意味着正在处理的文件可能依然会丢失，但文件系统本身保持一致，且其它所有数据都是安全的。

==== ext4
2.6.28
ext4(fourth extended filesystem)

=== ext2
https://elixir.bootlin.com/linux/latest/source/include/linux/ext2_fs.h
struct ext2_inode: https://elixir.bootlin.com/linux/latest/source/fs/ext2/ext2.h
struct ext2_dir_entry_2: https://elixir.bootlin.com/linux/latest/source/fs/ext2/ext2.h
磁盘上的ext2_inode数据结构对应内存中的inode结构，二者有很大的不同；
同样地，目录项ext2_dir_entry_2结构对应内存中的dentry结构，二者也有很大的不同。

=== ext4

==== 数据结构
struct ext4_dir_entry: https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h
struct ext4_inode: https://elixir.bootlin.com/linux/latest/source/fs/ext4/ext4.h

[source, c]
.https://elixir.bootlin.com/linux/latest/source/fs/ext4/file.c
----
const struct file_operations ext4_file_operations = {
	.llseek		= ext4_llseek,
	.read_iter	= ext4_file_read_iter,
	.write_iter	= ext4_file_write_iter,
	.iopoll		= iocb_bio_iopoll,
	.unlocked_ioctl = ext4_ioctl,
#ifdef CONFIG_COMPAT
	.compat_ioctl	= ext4_compat_ioctl,
#endif
	.mmap		= ext4_file_mmap,
	.mmap_supported_flags = MAP_SYNC,
	.open		= ext4_file_open,
	.release	= ext4_release_file,
	.fsync		= ext4_sync_file,
	.get_unmapped_area = thp_get_unmapped_area,
	.splice_read	= generic_file_splice_read,
	.splice_write	= iter_file_splice_write,
	.fallocate	= ext4_fallocate,
};

const struct inode_operations ext4_file_inode_operations = {
	.setattr	= ext4_setattr,
	.getattr	= ext4_file_getattr,
	.listxattr	= ext4_listxattr,
	.get_inode_acl	= ext4_get_acl,
	.set_acl	= ext4_set_acl,
	.fiemap		= ext4_fiemap,
	.fileattr_get	= ext4_fileattr_get,
	.fileattr_set	= ext4_fileattr_set,
};
----

==== 参考
https://en.wikipedia.org/wiki/Ext4
https://lwn.net/Kernel/Index/#Filesystems-ext4

=== 备用文件系统
==== XFS

==== ZFS

==== Btrfs

===== 参考
https://en.wikipedia.org/wiki/Btrfs
https://btrfs.wiki.kernel.org/index.php/Main_Page
https://lwn.net/Kernel/Index/#Btrfs

=== 其它
▪ lost+found

=== 参考
https://opensource.com/article/18/4/ext4-filesystem
https://lrita.github.io/images/posts/filesystem/Linux.Kernel.Write.Procedure.pdf