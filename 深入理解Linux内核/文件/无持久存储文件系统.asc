:toc:
:toclevels: 5
:hardbreaks-option:

== 无持久存储文件系统

=== proc
▪ /proc:  man proc
▪ https://github.com/torvalds/linux/tree/master/fs/proc

▪ 内容:
cd /proc/$pid
ll -a
cat maps/cat status/od -t a cmdline等

▪ struct proc_dir_entry
https://elixir.bootlin.com/linux/latest/source/fs/proc/internal.h

▪ struct proc_inode
https://elixir.bootlin.com/linux/latest/source/fs/proc/internal.h

▪ 装载proc文件系统
从用户空间看, /proc的装载几乎与非虚拟文件系统是一样的。唯一的不同是通常将proc或者none关键字指定为数据源, 而不是使用设备文件。
struct file_system_type proc_fs_type 
proc_fill_super函数
struct proc_dir_entry proc_root
struct file_operations proc_root_operations
struct inode_operations proc_root_inode_operations

▪ 管理proc数据项
__proc_create
proc_root_lookup https://elixir.bootlin.com/linux/latest/source/fs/proc/root.c

▪ 读写
https://elixir.bootlin.com/linux/latest/source/fs/proc/root.c

▪ 进程相关
proc_pid_lookup https://elixir.bootlin.com/linux/latest/source/fs/proc/base.c

▪ 内存相关
https://elixir.bootlin.com/linux/latest/source/fs/proc/meminfo.c

▪ 系统控制机制
https://elixir.bootlin.com/linux/latest/source/include/linux/sysctl.h

=== debugfs
https://en.wikipedia.org/wiki/Debugfs
https://elixir.bootlin.com/linux/latest/source/fs/debugfs

=== libfs
https://elixir.bootlin.com/linux/latest/source/fs/libfs.c

=== relayfs
https://elixir.bootlin.com/linux/latest/source/include/linux/relay.h

https://docs.kernel.org/filesystems/relay.html

=== sysfs
▪ 简介与历史
since 2.6
sysfs可以将设备(devices)和驱动程序(drivers)的信息从内核输出到用户空间，也可以用来对设备和驱动程序做设置。
发展历史:
内核开发团队在Linux 2.5的开发过程中引入了驱动程序模型(Linux driver model)，以解决2.4核心遭遇的以下问题:
没有统一的机制表达驱动程序和设备的关系。
不存在一般的热插拔(hotplug)机制。
procfs文件系统过度混乱，包含了许多不是进程(process)的信息。
sysfs的目的是把一些原本在procfs中关于设备的部分独立出来，以device tree的形式呈现。

每个被加入driver model tree内的对象，包括驱动程序、设备以及class设备，都会在sysfs文件系统中以一个目录呈现。对象的属性作为文件出现。符号链接代表对象间的关系，通常安装在/sys目录下。
参考: https://en.wikipedia.org/wiki/Sysfs

▪ 源码
https://github.com/torvalds/linux/tree/master/fs/sysfs
