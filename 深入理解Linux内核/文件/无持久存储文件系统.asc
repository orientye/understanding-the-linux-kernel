:toc:
:toclevels: 5
:hardbreaks-option:

== 无持久存储文件系统

=== proc
从用户空间看, /proc的装载几乎与非虚拟文件系统是一样的。唯一的不同是通常将proc或者none关键字指定为数据源, 而不是使用设备文件。

▪ 命令:

    man proc
    cd /proc/$pid
    ll -a
    cat maps等

struct proc_dir_entry: https://elixir.bootlin.com/linux/latest/source/fs/proc/internal.h

struct proc_inode: https://elixir.bootlin.com/linux/latest/source/fs/proc/internal.h

装载proc文件系统: https://elixir.bootlin.com/linux/latest/source/fs/proc/root.c

=== debugfs
https://en.wikipedia.org/wiki/Debugfs
https://elixir.bootlin.com/linux/latest/source/fs/debugfs

=== libfs
https://elixir.bootlin.com/linux/latest/source/fs/libfs.c

=== relayfs
https://elixir.bootlin.com/linux/latest/source/include/linux/relay.h

https://docs.kernel.org/filesystems/relay.html

=== sysfs
since 2.6
sysfs可以将设备(devices)和驱动程序(drivers)的信息从内核输出到用户空间，也可以用来对设备和驱动程序做设置。

2.5引入了驱动程序模型(driver model)，主要解决:
没有统一的机制表达驱动程序和设备的关系；
不存在一般的热插拔(hotplug)机制。

procfs文件系统过度混乱，包含了许多不是进程(process)的信息。
sysfs把一些在procfs中关于设备的部分独立出来，以device tree的形式呈现。

每个被加入driver model tree内的对象，包括驱动程序、设备以及class设备，都会在sysfs文件系统中以一个目录呈现。对象的属性作为文件出现。符号链接代表对象间的关系，通常安装在/sys目录下。

Q: 内核在2.6中引入了sysfs并废弃devfs，为何现代的linux仍然存在/dev目录呢?
A: 现代linux的/dev其实是tmpfs(可以通过mount命令查看)，里面的特殊文件是用户空间的udev创建的。

实现: https://github.com/torvalds/linux/tree/master/fs/sysfs

static struct kernfs_root *sysfs_root: https://elixir.bootlin.com/linux/latest/source/fs/sysfs/mount.c

参考: https://en.wikipedia.org/wiki/Sysfs
