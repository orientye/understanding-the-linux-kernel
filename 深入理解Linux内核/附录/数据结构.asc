:toc:
:toclevels: 5
:hardbreaks-option:

== 数据结构

=== 双向链表
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/types.h
----
struct list_head {
	struct list_head *next, *prev;
};
----

示意图:

	list_head
		+-----------+
		|prev   next|<-+
		+-----------+  |
		^           |
		|           |
		|           |
		|           |      +-----------------+      +-----------------+
		|           +----->|list_head        |<---->|list_head        |<-----+
		|                  +-----------------+      +-----------------+      |
		|                                                                    |
		+--------------------------------------------------------------------+

操作: https://elixir.bootlin.com/linux/latest/source/include/linux/list.h

把prev和next抽象出来成为struct list_head，这种结构既可以寄宿在具体的宿主结构内部(此时其实叫list_node更贴切)，成为该数据额结构的连接件，也可以独立存在成为一个链表头。
链表的每个元素("宿主")都是离散存放的，因此不需要占用连续的内存。

=== 哈希表
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/types.h
----
struct hlist_head {
	struct hlist_node *first;
};

struct hlist_node {
	struct hlist_node *next, **pprev;
};
----

Q: 为什么struct hlist_node **pprev是二级指针？
A: 避免在首节点之后插入删除节点和在其他位置插入删除节点需要不同的实现逻辑

示意图:

	hlist_head
	+--------+
	|        | -> hlist_node -> hlist_node -> hlist_node
	+--------+
	|        | -> hlist_node -> hlist_node -> hlist_node
	+--------+
	|        | -> hlist_node -> hlist_node -> hlist_node
	+--------+

操作: https://elixir.bootlin.com/linux/latest/source/include/linux/hashtable.h

参考: https://lwn.net/Kernel/Index/#Hash_table

=== 红黑树
https://elixir.bootlin.com/linux/latest/source/include/linux/rbtree.h
https://elixir.bootlin.com/linux/latest/source/lib/rbtree.c

参考: https://github.com/torvalds/linux/blob/master/Documentation/core-api/rbtree.rst

=== maple tree
v6.1引入，是一种B树，RCU safe。

- radix tree (trie)

    ▪ When compact, Radix searches are quite efficient
    ▪ When sparse, Radix searches are extremely poor

- rbtree
    
    ▪ Function pointers are not as fast as they were a few years ago
    ▪ Not cache optimized
    ▪ Not RCU safe
        difficult to handle in a lockless manner:
            the balancing operation of the rbtree affects multiple items at the same time
    ▪ API is difficult to use

[format="csv", options="header", separator=#]
|===
  #rbtree#radix tree#maple tree
RCU safe#No#Yes#Yes
range support#Yes#Limited#Non-overlapping
tree height#Tall#Short#Medium
API#Hard#Easy#Easy
node#Embedded#External#External
node size#24 bytes#576 bytes#256 bytes
|===

https://elixir.bootlin.com/linux/latest/source/include/linux/maple_tree.h

参考: https://lpc.events/event/4/contributions/553/attachments/362/594/2019_LPC_Maple_Tree.pdf
参考: https://lwn.net/Kernel/Index/#Maple_trees

=== 基数树
since 4.20, 使用xarray实现:
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/radix-tree.h
----
/* Keep unconverted code working */
#define radix_tree_root		xarray
#define radix_tree_node		xa_node

struct radix_tree_preload {
	local_lock_t lock;
	unsigned nr;
	/* nodes->parent points to next preallocated node */
	struct radix_tree_node *nodes;
};
DECLARE_PER_CPU(struct radix_tree_preload, radix_tree_preloads);
----

https://elixir.bootlin.com/linux/latest/source/lib/radix-tree.c

参考: https://lwn.net/Kernel/Index/#Radix_tree
参考: https://en.wikipedia.org/wiki/Radix_tree

=== 位图
https://elixir.bootlin.com/linux/latest/source/include/linux/bitmap.h
https://elixir.bootlin.com/linux/latest/source/lib/bitmap.c

=== kfifo
https://elixir.bootlin.com/linux/latest/source/include/linux/kfifo.h

参考: https://lwn.net/Kernel/Index/#kfifo

=== xarray
xarray: eXtensible Arrays
since 4.17

The XArray provides an improved interface to the radix tree data structure, providing locking as part of the API, specifying GFP flags at allocation time, eliminating preloading, less re-walking the tree, more efficient iterations and not exposing RCU-protected pointers to its users.
参考: https://patchwork.kernel.org/project/linux-mm/patch/20180813161357.GB1199@bombadil.infradead.org/

vs. radix tree
The radix tree requires users to do their own locking; the XArray, instead, handles locking itself by default, simplifying the task of using it. The "preload" mechanism, which allows users to pre-allocate memory before acquiring locks, has been removed; it added significant complexity to the interface for almost no real value.

[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/xarray.h
----
/* ALLOC is for a normal 0-based alloc.  ALLOC1 is for an 1-based alloc */
#define XA_FLAGS_ALLOC	(XA_FLAGS_TRACK_FREE | XA_FLAGS_MARK(XA_FREE_MARK))
#define XA_FLAGS_ALLOC1	(XA_FLAGS_TRACK_FREE | XA_FLAGS_ZERO_BUSY)

/**
 * struct xarray - The anchor of the XArray.
 * @xa_lock: Lock that protects the contents of the XArray.
 *
 * To use the xarray, define it statically or embed it in your data structure.
 * It is a very small data structure, so it does not usually make sense to
 * allocate it separately and keep a pointer to it in your data structure.
 *
 * You may use the xa_lock to protect your own data structures as well.
 */
/*
 * If all of the entries in the array are NULL, @xa_head is a NULL pointer.
 * If the only non-NULL entry in the array is at index 0, @xa_head is that
 * entry.  If any other entry in the array is non-NULL, @xa_head points
 * to an @xa_node.
 */
struct xarray {
	spinlock_t	xa_lock;
/* private: The rest of the data structure is not to be used directly. */
	gfp_t		xa_flags;
	void __rcu *	xa_head;
};
----

https://elixir.bootlin.com/linux/latest/source/lib/xarray.c

参考: https://docs.kernel.org/core-api/xarray.html
参考: https://lwn.net/Kernel/Index/#XArray

=== circ_buf
https://elixir.bootlin.com/linux/latest/source/include/linux/circ_buf.h

参考: https://docs.kernel.org/core-api/circular-buffers.html
参考: https://lwn.net/Kernel/Index/#Circular_buffers

=== 无锁单链表
Lock-less NULL terminated single linked list
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/llist.h
----
struct llist_head {
	struct llist_node *first;
};

struct llist_node {
	struct llist_node *next;
};
----

=== 优先级链表
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/plist.h
----
struct plist_head {
	struct list_head node_list;
};

struct plist_node {
	int			prio;
	struct list_head	prio_list;
	struct list_head	node_list;
};
----

struct list_head	prio_list:
仅包含链表中优先级不同的节点，按照优先级由小到大的顺序排列，主要用于在链表元素过多时，做快速的优先级查找
struct list_head	node_list:
包含该优先级链表的所有元素，按优先级由小到大的顺序排列，对于相同优先级的节点，按照先后顺序安排位置

示例图:

	pl:prio_list (only for plist_node)
	nl:node_list
	HEAD|             NODE(S)
		|
		||------------------------------------|
		||->|pl|<->|pl|<--------------->|pl|<-|
		|   |10|   |21|   |21|   |21|   |40|   (prio)
		|   |  |   |  |   |  |   |  |   |  |
		|   |  |   |  |   |  |   |  |   |  |
	|->|nl|<->|nl|<->|nl|<->|nl|<->|nl|<->|nl|<-|
	|-------------------------------------------|

=== RCU
==== rcu list
https://elixir.bootlin.com/linux/latest/source/include/linux/rculist.h