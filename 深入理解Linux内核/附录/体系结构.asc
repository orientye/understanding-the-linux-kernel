:toc:
:toclevels: 5
:hardbreaks-option:

== 体系结构

=== 冯·诺依曼结构与哈佛结构
▪ 冯·诺依曼结构(von Neumann architecture)

    又称作普林斯顿体系结构(Princetion architecture)
    是一种将程序指令存储和数据存储存放在一起的存储器结构
    程序指令存储地址和数据存储地址指向同一个存储器的不同物理位置，因此程序指令和数据的宽度相同

▪ 哈佛结构(Harvard architecture)

    是一种将程序指令存储和数据存储分开的存储器结构
    指令和数据可以有不同的数据宽度

包括x86在内的大多数现代CPU，其实是哈佛和冯诺依曼结构的混合体，准确的来说在CPU核心内部是哈佛结构，而在外部是冯诺依曼结构。
这个用CPU-Z软件就能看出来:
无论是INTEL还是AMD的处理器，L1 cache分为数据和指令两部分，这是哈佛结构的典型特征。
但从L2开始，包括后面的L3、RAM和外存，数据和指令都存储在了同一个空间里，这部分是冯诺依曼结构。当然由于cache的特殊性，它和RAM/外存并没有用同一个地址空间。
参考: https://www.zhihu.com/question/22406681/answer/1052274405

=== 硬件指令集(Instruction Set Architecture, ISA)
- RISC与CISC
- SIMD(单指令多数据)

=== X86
==== 概念
▪ 南北桥架构

    南桥(Southbridge)
        处理低速信号
        南桥芯片负责I/O总线之间的通信
        如PCI总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等。
    北桥(Northbridge)
        处理高速信号
        处理CPU、存储器、PCI Express显卡(早年AGP显卡)、高速PCI Express X16/X8端口，以及与南桥之间的通信。

▪ 总线

    数据总线(Data Bus): 在CPU与RAM之间来回传送需要处理或储存的数据。
    地址总线(Address Bus): 用来指定在RAM(Random Access Memory)之中储存的数据的地址。
    控制总线(Control Bus): 将微处理器控制单元(Control Unit)的信号，传送到周边设备。

▪ 实模式 保护模式 长模式

    BIOS引导后，系统直接进入最简单、特权最大的实模式
    而后告知CPU，切换到保护模式，系统运行在ring0
    后续的用户进程，一般运行在ring3，执行特权指令需要通过操作系统

==== 代码
https://lore.kernel.org/platform-driver-x86/
https://github.com/torvalds/linux/tree/master/arch/x86

=== ARM
==== 代码
https://lore.kernel.org/linux-arm-kernel/
https://github.com/torvalds/linux/tree/master/arch/arm64

=== loongarch

==== 代码
https://lore.kernel.org/loongarch/
https://github.com/torvalds/linux/tree/master/arch/loongarch

=== UM
==== 概念
User-mode Linux (UML)是用户态下的linux, 是一种比较特殊的"arch"。

作用: 在调试与硬件无关的内核代码时，使用起来比较方便。

参考:
https://en.wikipedia.org/wiki/User-mode_Linux
http://user-mode-linux.sourceforge.net/

==== 代码
https://lore.kernel.org/linux-um/
https://github.com/torvalds/linux/tree/master/arch/x86/um

=== 参考
https://lore.kernel.org/linux-arch/
