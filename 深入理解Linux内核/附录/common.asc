:toc:
:toclevels: 5
:hardbreaks-option:

== common

=== container_of
根据一个结构体变量中的一个成员变量的指针来获取指向整个结构体变量的指针
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/container_of.h
----
#define container_of(ptr, type, member) ({				\
	void *__mptr = (void *)(ptr);					\
	static_assert(__same_type(*(ptr), ((type *)0)->member) ||	\
		      __same_type(*(ptr), void),			\
		      "pointer type mismatch in container_of()");	\
	((type *)(__mptr - offsetof(type, member))); })
----

offsetof宏: https://en.cppreference.com/w/c/types/offsetof

=== ALTERNATIVE
ALTERNATIVE, ALTERNATIVE_2
通过判断当前CPU是否支持某些feature来选择指令
https://elixir.bootlin.com/linux/latest/source/arch/x86/include/asm/alternative.h
https://elixir.bootlin.com/linux/latest/source/arch/arm64/include/asm/alternative-macros.h

=== DEFINE_MUTEX
[source, c]
.https://elixir.bootlin.com/linux/latest/source/include/linux/mutex.h
----
#define __MUTEX_INITIALIZER(lockname) \
		{ .owner = ATOMIC_LONG_INIT(0) \
		, .wait_lock = __RAW_SPIN_LOCK_UNLOCKED(lockname.wait_lock) \
		, .wait_list = LIST_HEAD_INIT(lockname.wait_list) \
		__DEBUG_MUTEX_INITIALIZER(lockname) \
		__DEP_MAP_MUTEX_INITIALIZER(lockname) }

#define DEFINE_MUTEX(mutexname) \
	struct mutex mutexname = __MUTEX_INITIALIZER(mutexname)
----

https://stackoverflow.com/questions/33932991/difference-between-mutex-init-and-define-mutex

=== MAX_NUMNODES
[source, c]
.https://elixir.bootlin.com/linux/v6.15.7/source/include/linux/nodemask_types.h
----
#ifdef CONFIG_NODES_SHIFT
#define NODES_SHIFT     CONFIG_NODES_SHIFT
#else
#define NODES_SHIFT     0
#endif

#define MAX_NUMNODES    (1 << NODES_SHIFT)
----